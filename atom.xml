<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>间客六十</title>
  <icon>https://www.gravatar.com/avatar/cda2d170e4d695691a573126f5381220</icon>
  <subtitle>技术引领生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liusblog.top/"/>
  <updated>2020-05-17T16:48:05.118Z</updated>
  <id>https://liusblog.top/</id>
  
  <author>
    <name>spygg</name>
    <email>liushidc@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux简单运维</title>
    <link href="https://liusblog.top/2020/05/10/Linux%E7%AE%80%E5%8D%95%E8%BF%90%E7%BB%B4/"/>
    <id>https://liusblog.top/2020/05/10/Linux简单运维/</id>
    <published>2020-05-10T01:23:28.000Z</published>
    <updated>2020-05-17T16:48:05.118Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>运行环境 cetos 7.8 中文界面</p></blockquote><h2 id="安装远程桌面"><a href="#安装远程桌面" class="headerlink" title="安装远程桌面"></a>安装远程桌面</h2><ol><li>ssh 登录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.xxx</span><br></pre></td></tr></table></figure><ol start="2"><li>安装远程桌面</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tigervnc-server tigervnc</span><br></pre></td></tr></table></figure><ol start="3"><li>设置 vnc 密码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vncpasswd</span><br></pre></td></tr></table></figure><p>根据提示输入 vnc 密码(可以和登录密码<strong>不同</strong>)</p><ol start="4"><li>启动 vncserver</li></ol><p>冒号后的数字要记住,后面登录用,网上说默认登录端口 57900,其实不用管</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vncserver</span> :<span class="string">2</span></span><br><span class="line"><span class="attr">vncserver</span> <span class="string">-list</span></span><br></pre></td></tr></table></figure><ol start="5"><li>防火墙</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent <span class="attribute">--zone</span>=public <span class="attribute">--add-port</span>=5901-5905/tcp</span><br><span class="line">sudo systemctl restart firewalld.service</span><br></pre></td></tr></table></figure><ol start="6"><li>开机自启</li></ol><p>注意这里的@后面的数字就是将来登录的<strong>端口</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">vncserver</span>@.<span class="title">service</span> /<span class="title">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">vncserver</span>@:1.<span class="title">service</span></span></span><br><span class="line">sudo vim /<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">vncserver</span>@:1.<span class="title">service</span></span></span><br></pre></td></tr></table></figure><p>内容如下注意替换 lenovo 为你的用户名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"><span class="attribute">Description</span>=Remote desktop<span class="built_in"> service </span>(VNC)</span><br><span class="line"><span class="attribute">After</span>=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="attribute">Type</span>=forking</span><br><span class="line"><span class="attribute">ExecStartPre</span>=/bin/sh -c <span class="string">'/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :'</span></span><br><span class="line"><span class="attribute">ExecStart</span>=/sbin/runuser -l lenovo -c <span class="string">"/usr/bin/vncserver %i -geometry 1280x720"</span></span><br><span class="line"><span class="attribute">PIDFile</span>=/home/lenovo/.vnc/%H%i.pid</span><br><span class="line"><span class="attribute">ExecStop</span>=/bin/sh -c <span class="string">'/usr/bin/vncserver -kill %i &gt; /dev/null 2&gt;&amp;1 || :'</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"><span class="attribute">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>设置开机自动</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable <span class="symbol">vncserver@</span>:<span class="number">1.</span>service</span><br></pre></td></tr></table></figure><ol start="7"><li>在 windows 上下载 tigervnc</li></ol><p>需要注意的是登陆地址需要填写端口数字为启动时的那个,如 2(如果上一步设置成功为 1)<br><img src="/photos/Linux简单运维/windows登录.webp" alt="远程登录"></p><h2 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h2><p>这里吐槽下网上的都是一大抄,很是恶心,在找不到 Chinese(Intelligent Pinyin)时应该通过下属命令看下依赖,一般是缺少 table 表造成的</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep ibus</span><br><span class="line">yum install ibus-<span class="keyword">table</span>-chinese-*</span><br></pre></td></tr></table></figure><h2 id="文件共享-Samba"><a href="#文件共享-Samba" class="headerlink" title="文件共享 Samba"></a>文件共享 Samba</h2><p>继续更新中…</p><h2 id="安装-ftpd-服务"><a href="#安装-ftpd-服务" class="headerlink" title="安装 ftpd 服务"></a>安装 ftpd 服务</h2><p>参考文章<a href="https://blog.csdn.net/zwd926/article/details/89884089" target="_blank" rel="noopener">Linux 安装 vsftpd（ftp 服务器）及配置详解</a></p><ol><li>安装 vsftpd</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y <span class="keyword">install</span> vsftpd</span><br></pre></td></tr></table></figure><p>2.设置开机自启</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig vsftpd <span class="keyword">on</span></span><br></pre></td></tr></table></figure><p>3.开启服务</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">stop</span> <span class="selector-tag">vsftpd</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">start</span> <span class="selector-tag">vsftpd</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">status</span> <span class="selector-tag">vsftpd</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><p>4.创建 ftp 虚拟用户</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /<span class="built_in">home</span>/ftproot/ftptest</span><br><span class="line">sudo useradd -d /<span class="built_in">home</span>/ftproot/ftptest -g ftp -s /sbin/nologin ftptest</span><br></pre></td></tr></table></figure><p>5.设置用户权限</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R ftptest /<span class="built_in">home</span>/ftproot/ftptest</span><br><span class="line">sudo chmod -R <span class="number">777</span> /<span class="built_in">home</span>/ftproot/ftptest</span><br></pre></td></tr></table></figure><p>6.设置用户密码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo passwd ftptest</span></span><br></pre></td></tr></table></figure><p>7.配置 vsftp.conf</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/vsftpd/vsftpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>关键点如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">anonymous_enable</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">chroot_list_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">chroot_list_file</span>=/etc/vsftpd/chroot_list</span><br><span class="line"><span class="attr">allow_writeable_chroot</span>=<span class="literal">YES</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面几句不知道有用没有</span></span><br><span class="line"><span class="attr">pasv_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">pasv_min_port</span>=<span class="number">30000</span></span><br><span class="line"><span class="attr">pasv_max_port</span>=<span class="number">30010</span></span><br></pre></td></tr></table></figure><p>8.添加用户列表</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>vsftpd<span class="regexp">/chroot_list</span></span><br></pre></td></tr></table></figure><p>在文件中添加</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ftptest</span></span><br></pre></td></tr></table></figure><p>9.修改 ftp 用户权限</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="string">/etc/pam.d/vsftpd</span></span><br><span class="line"><span class="comment">#auth required pam_shells.so</span></span><br></pre></td></tr></table></figure><p>或者增加/sbin/nologin</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>shells</span><br><span class="line"><span class="regexp">/sbin/</span>nologin</span><br></pre></td></tr></table></figure><p>10.重启服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>vsftpd restart</span><br></pre></td></tr></table></figure><p>11.错误调试</p><p>确保 ftp_home_dir 和 allow_ftpd_full_access 必须为 on</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status vsftpd.service</span><br><span class="line">getsebool -<span class="keyword">a</span> | grep <span class="keyword">ftp</span></span><br><span class="line">setsebool -P allow_ftpd_full_access <span class="keyword">on</span></span><br><span class="line">setsebool -P tftp_home_dir <span class="keyword">on</span></span><br></pre></td></tr></table></figure><h2 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h2><ol><li>编写开机自启脚本</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/init.d/tomcatauto.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>写入以下内容注意<strong>前三行</strong>格式一定,如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#chkconfig: 2345 80 90</span></span><br><span class="line"><span class="comment">#description:auto_run</span></span><br><span class="line"></span><br><span class="line">/home/lenovo/wbfsj/apache-tomcat-7.0.103/bin/startup.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>开机自启</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.<span class="keyword">d</span>/tomcatauto.<span class="keyword">sh</span></span><br><span class="line">sudo chkconfig tomcatauto.<span class="keyword">sh</span> <span class="keyword">on</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;运行环境 cetos 7.8 中文界面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装远程桌面&quot;&gt;&lt;a href=&quot;#安装远程桌面&quot; class=&quot;headerlink&quot; title=&quot;安装远程桌面&quot;&gt;&lt;/a&gt;安装远程桌面&lt;/h2&gt;&lt;ol
      
    
    </summary>
    
      <category term="运维" scheme="https://liusblog.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="远程桌面" scheme="https://liusblog.top/categories/%E8%BF%90%E7%BB%B4/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"/>
    
      <category term="文件共享" scheme="https://liusblog.top/categories/%E8%BF%90%E7%BB%B4/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"/>
    
      <category term="输入法" scheme="https://liusblog.top/categories/%E8%BF%90%E7%BB%B4/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
    
      <category term="Linux" scheme="https://liusblog.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Qt下的Websocket</title>
    <link href="https://liusblog.top/2020/05/06/Qt%E4%B8%8B%E7%9A%84Websocket/"/>
    <id>https://liusblog.top/2020/05/06/Qt下的Websocket/</id>
    <published>2020-05-06T11:11:13.000Z</published>
    <updated>2020-05-06T12:28:11.099Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在上一篇中介绍了使用 Qt 开发 HttpServer 常用的库,但是由于 HTTP 的特性使得只能是客户端主动请求,在对实时性要求比较高的情况下就需要轮询操作,WebSocket 的出现彻底改变这一现象</p></blockquote><h2 id="WebSocket-的使用"><a href="#WebSocket-的使用" class="headerlink" title="WebSocket 的使用"></a>WebSocket 的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[HTTP 轮询]--&gt;D(WS中断)</span><br><span class="line"></span><br><span class="line">style A fill:#2ff,fill-opacity:0.6,stroke:#faa,stroke-width:4px</span><br><span class="line">style D stroke:#000,stroke-width:4px;</span><br></pre></td></tr></table></figure><p>如下图所示<br><img src="/photos/Qt下的Websocket/ws测试echo.webp" alt="ws测试echo"></p><p>Qt 对 webSocket 支持的比较好,甚至还带了一个例子,乍一看还比较复杂,本人修改了下,简单易用,和 QTcpServer 非常想像</p><ul><li>在工程中引入 <strong>websockets</strong></li><li>引入 QWebSocketServer</li><li>编写 JS 代码</li></ul><p>CPP 核心代码如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">QWebSocketServer *<span class="keyword">server</span> = <span class="built_in">new</span> QWebSocketServer("Spygg Server", QWebSocketServer::NonSecureMode, this);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">server</span>-&gt;<span class="keyword">listen</span>(QHostAddress::<span class="keyword">Any</span>, <span class="number">12345</span>))&#123;</span><br><span class="line">    qFatal("开服WS服务器失败");</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">connect</span>(<span class="keyword">server</span>, &amp;QWebSocketServer::newConnection, this, [&amp;, <span class="keyword">server</span>]()&#123;</span><br><span class="line">    QWebSocket *socket = <span class="keyword">server</span>-&gt;nextPendingConnection();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">connect</span>(socket, &amp;QWebSocket::textMessageReceived, this, [=](QString message)&#123;</span><br><span class="line"></span><br><span class="line">        socket-&gt;sendTextMessage(message);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">connect</span>(socket, &amp;QWebSocket::disconnected, this, [&amp;]()&#123;</span><br><span class="line">        //这里非常重要,在文档中说明了nextPendingConnection产生的socket要自己手动回收</span><br><span class="line">        QWebSocket *sc = qobject_cast&lt;QWebSocket *&gt;(sender());</span><br><span class="line">        <span class="keyword">if</span>(sc)&#123;</span><br><span class="line">            sc-&gt;<span class="keyword">close</span>();</span><br><span class="line">            sc-&gt;deleteLater();</span><br><span class="line">            sc = Q_NULLPTR;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>html 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wsCommution</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (location.search != <span class="string">""</span>)</span><br><span class="line">            <span class="keyword">var</span> baseUrl = (<span class="regexp">/[?&amp;]webChannelBaseUrl=([A-Za-z0-9\-:/\.]+)/</span>.exec(location.search)[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">var</span> baseUrl = <span class="string">"ws://localhost:12345"</span>;</span><br><span class="line"></span><br><span class="line">        output(<span class="string">"Connecting to WebSocket server at "</span> + baseUrl + <span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(baseUrl);</span><br><span class="line"></span><br><span class="line">        socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">"web channel closed"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        socket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">"web channel error: "</span> + error);</span><br><span class="line">        &#125;;</span><br><span class="line">        socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            output(<span class="string">"WebSocket connected, setting up QWebChannel."</span>);</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"send"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//发送内容</span></span><br><span class="line">                socket.send(text);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            output(<span class="string">"Connected to WebChannel, ready to send/receive messages!"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//接受内容</span></span><br><span class="line">            output(<span class="string">"Received message:"</span> + msg.data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回建立的socket</span></span><br><span class="line">        <span class="keyword">return</span> socket;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="测试工程下载"><a href="#测试工程下载" class="headerlink" title="测试工程下载"></a>测试工程下载</h2><p><a href="/attachment/Qt下的Websocket/websocketDemo.zip">测试工程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在上一篇中介绍了使用 Qt 开发 HttpServer 常用的库,但是由于 HTTP 的特性使得只能是客户端主动请求,在对实时性要求比较高的情况下就需要轮询操作,WebSocket 的出现彻底改变这一现象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://liusblog.top/tags/Qt/"/>
    
      <category term="Websocket" scheme="https://liusblog.top/tags/Websocket/"/>
    
      <category term="Html" scheme="https://liusblog.top/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>Qt下的Http服务器开发</title>
    <link href="https://liusblog.top/2020/05/06/Qt%E4%B8%8B%E7%9A%84Http%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91/"/>
    <id>https://liusblog.top/2020/05/06/Qt下的Http服务器开发/</id>
    <published>2020-05-06T11:10:48.000Z</published>
    <updated>2020-05-06T11:38:02.216Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在实际程序的开发中,html 越来越流行,作为跨平台的大户的 Qt 对 web 支持一直没有一个较好的官方模块来进行支持,本文简要介绍下常用的 Web 服务器</p></blockquote><h2 id="JQHttpServer"><a href="#JQHttpServer" class="headerlink" title="JQHttpServer"></a>JQHttpServer</h2><p><a href="https://github.com/188080501/JQHttpServer" target="_blank" rel="noopener">JQHttpServer</a>是大神 <em>Jason</em> 开发的轻量级 web 服务器,具有以下特点:</p><ul><li>接口简单,上手快</li><li>默认采用异步架构处理,在需要同步处理时不时很好掌握</li><li>无第三方依赖</li><li>开发者友好,很 <strong>NICE</strong> 啊</li></ul><p>当把这个问题反馈给大神以后,大神回复如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">把 <span class="keyword">session</span> 保存出去到你的业务处理线程，等处理好数据库数据的时候再调用 reply 或者在处理 <span class="keyword">session</span> 的回调线程里处理数据库数据，然后调用 reply（我用的这个方法）</span><br><span class="line">注：<span class="keyword">session</span> 可以跨线程操作，本身已经做了线程安全处理</span><br></pre></td></tr></table></figure><h2 id="qhttpserver"><a href="#qhttpserver" class="headerlink" title="qhttpserver"></a>qhttpserver</h2><p><a href="https://github.com/nikhilm/qhttpserver" target="_blank" rel="noopener">qhttpserver</a>也是一个小巧的 Web 服务器,不过这玩意有 BUG,手动修复了之后在实际项目中采用(勉强可用,不推荐), BUG 大抵如下:</p><ul><li>获取 Request 的参数时存在 bug(本人已经修复)</li><li>当设置请求头中包含请求长度时会出错(依然没有解决)</li></ul><h2 id="QtWebApp"><a href="#QtWebApp" class="headerlink" title="QtWebApp"></a>QtWebApp</h2><p><a href="https://github.com/samiavasil/QtWebApp" target="_blank" rel="noopener">QtWebApp</a>,这个是个较为成熟的 Web 服务器,API 路由模块做的很好,有着良好的 demo,<strong>重点推荐之</strong>,具有以下特点</p><ul><li>集成 Windows Unix <strong>服务</strong></li><li>集成<strong>静态</strong>服务器</li><li><strong>模板</strong>解析</li><li>路由分层良好</li><li>良好的 Demo</li></ul><p>要说缺点吗?个人感觉微有瑕疵的地方就在于过多的使用了 QSettings 来进行参数设置</p><h2 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h2><p><a href="https://github.com/cesanta/mongoose" target="_blank" rel="noopener">mongoose</a>这个是个纯 C 的 HttpServer 库听说在嵌入式设备上用的比较多,看起来不错的样子<a href="https://www.cesanta.com/mongoose-library.html" target="_blank" rel="noopener">官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在实际程序的开发中,html 越来越流行,作为跨平台的大户的 Qt 对 web 支持一直没有一个较好的官方模块来进行支持,本文简要介绍下常用的 Web 服务器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;JQHttpServer&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://liusblog.top/tags/Qt/"/>
    
      <category term="HttpServer" scheme="https://liusblog.top/tags/HttpServer/"/>
    
      <category term="服务器" scheme="https://liusblog.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>HTML5播放m3u8的方法</title>
    <link href="https://liusblog.top/2020/03/03/HTML5%E6%92%AD%E6%94%BEm3u8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://liusblog.top/2020/03/03/HTML5播放m3u8的方法/</id>
    <published>2020-03-03T13:22:58.000Z</published>
    <updated>2020-03-03T14:05:48.218Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>现在越来越多的网站采用 m3u8 的方式来播放视频,但是原生的浏览器(除 Safari 外)都不支持,经搜索发现 video-js 可以将 m3u8 嵌到网页中,特记录之…</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>引入 video-js</li><li>定义一个 video 标签,源就直接填写 m3u8 路径好了</li><li>初始化,直接用</li></ol><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>为什么要写这个呢? 本人认为 m3u8 几乎是未来视频的主要方向了,特别是发现一个视频网站想做一个播放器,思路有二:</p><ol><li>全部用 ffmpeg 解码</li><li>做成网页的形式(简单方便)</li></ol><p>上述方法中 1 方法比较繁琐,但是可控性强,方法 2 使用快速特别是做服务器的同学(比如写个爬虫爬到 m3u8 然后做个小服务器进行转流),或者结合两者,一直有个想法做播放器来着.待我慢慢来…</p><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>将 Mp4 转 m3u8 命令</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmpeg -i foo.mp4 -codec copy -vbsf h264_mp4toannexb -map <span class="number">0</span> -f segment -segment_list <span class="keyword">out</span>.m3u8 -segment_time <span class="number">10</span> <span class="keyword">out</span>%<span class="number">03</span>d.ts</span><br></pre></td></tr></table></figure><h2 id="PPS"><a href="#PPS" class="headerlink" title="PPS"></a>PPS</h2><p>测试代码备份</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Video.js 7.4.1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://vjs.zencdn.net/7.6.6/video-js.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      body &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#191919</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.m</span> &#123;</span></span><br><span class="line">        width: 960px;</span><br><span class="line">        height: 400px;</span><br><span class="line">        margin-left: auto;</span><br><span class="line">        margin-right: auto;</span><br><span class="line">        margin-top: 100px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">video</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"my-video"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"video-js"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">controls</span></span></span><br><span class="line"><span class="tag">        <span class="attr">preload</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">"960"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">height</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">poster</span>=<span class="string">"m.jpg"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-setup</span>=<span class="string">"&#123;&#125;"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span></span></span><br><span class="line"><span class="tag">          <span class="attr">src</span>=<span class="string">"http://recordcdn.quklive.com/upload/vod/user1462960877450854/1550739580345725/1/video.m3u8"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"application/x-mpegURL"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;source src="http://vjs.zencdn.net/v/oceans.webm" type="video/webm"&gt;</span></span><br><span class="line"><span class="comment">    &lt;source src="http://vjs.zencdn.net/v/oceans.ogv" type="video/ogg"&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"vjs-no-js"</span>&gt;</span></span><br><span class="line">          To view this video please enable JavaScript, and consider upgrading to</span><br><span class="line">          a web browser that</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://videojs.com/html5-video-support/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span></span></span><br><span class="line"><span class="tag">            &gt;</span>supports HTML5 video<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://vjs.zencdn.net/7.6.6/video.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//设置中文</span></span></span><br><span class="line"><span class="actionscript">        videojs.addLanguage(<span class="string">"zh-CN"</span>, &#123;</span></span><br><span class="line"><span class="actionscript">          Play: <span class="string">"播放"</span>,</span></span><br><span class="line"><span class="actionscript">          Pause: <span class="string">"暂停"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Current Time"</span>: <span class="string">"当前时间"</span>,</span></span><br><span class="line"><span class="actionscript">          Duration: <span class="string">"时长"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Remaining Time"</span>: <span class="string">"剩余时间"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Stream Type"</span>: <span class="string">"媒体流类型"</span>,</span></span><br><span class="line"><span class="actionscript">          LIVE: <span class="string">"直播"</span>,</span></span><br><span class="line"><span class="actionscript">          Loaded: <span class="string">"加载完毕"</span>,</span></span><br><span class="line"><span class="actionscript">          Progress: <span class="string">"进度"</span>,</span></span><br><span class="line"><span class="actionscript">          Fullscreen: <span class="string">"全屏"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Non-Fullscreen"</span>: <span class="string">"退出全屏"</span>,</span></span><br><span class="line"><span class="actionscript">          Mute: <span class="string">"静音"</span>,</span></span><br><span class="line"><span class="actionscript">          Unmute: <span class="string">"取消静音"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Playback Rate"</span>: <span class="string">"播放速度"</span>,</span></span><br><span class="line"><span class="actionscript">          Subtitles: <span class="string">"字幕"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"subtitles off"</span>: <span class="string">"关闭字幕"</span>,</span></span><br><span class="line"><span class="actionscript">          Captions: <span class="string">"内嵌字幕"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"captions off"</span>: <span class="string">"关闭内嵌字幕"</span>,</span></span><br><span class="line"><span class="actionscript">          Chapters: <span class="string">"节目段落"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Close Modal Dialog"</span>: <span class="string">"关闭弹窗"</span>,</span></span><br><span class="line"><span class="actionscript">          Descriptions: <span class="string">"描述"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"descriptions off"</span>: <span class="string">"关闭描述"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Audio Track"</span>: <span class="string">"音轨"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"You aborted the media playback"</span>: <span class="string">"视频播放被终止"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"A network error caused the media download to fail part-way."</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="string">"网络错误导致视频下载中途失败。"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"The media could not be loaded, either because the server or network failed or because the format is not supported."</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="string">"视频因格式不支持或者服务器或网络的问题无法加载。"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"The media playback was aborted due to a corruption problem or because the media used features your browser did not support."</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="string">"由于视频文件损坏或是该视频使用了你的浏览器不支持的功能，播放终止。"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"No compatible source was found for this media."</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="string">"无法找到此视频兼容的源。"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"The media is encrypted and we do not have the keys to decrypt it."</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="string">"视频已加密，无法解密。"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Play Video"</span>: <span class="string">"播放视频"</span>,</span></span><br><span class="line"><span class="actionscript">          Close: <span class="string">"关闭"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Modal Window"</span>: <span class="string">"弹窗"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"This is a modal window"</span>: <span class="string">"这是一个弹窗"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"This modal can be closed by pressing the Escape key or activating the close button."</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="string">"可以按ESC按键或启用关闭按钮来关闭此弹窗。"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">", opens captions settings dialog"</span>: <span class="string">", 开启标题设置弹窗"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">", opens subtitles settings dialog"</span>: <span class="string">", 开启字幕设置弹窗"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">", opens descriptions settings dialog"</span>: <span class="string">", 开启描述设置弹窗"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">", selected"</span>: <span class="string">", 选择"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"captions settings"</span>: <span class="string">"字幕设定"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Audio Player"</span>: <span class="string">"音频播放器"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Video Player"</span>: <span class="string">"视频播放器"</span>,</span></span><br><span class="line"><span class="actionscript">          Replay: <span class="string">"重播"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Progress Bar"</span>: <span class="string">"进度小节"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Volume Level"</span>: <span class="string">"音量"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"subtitles settings"</span>: <span class="string">"字幕设定"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"descriptions settings"</span>: <span class="string">"描述设定"</span>,</span></span><br><span class="line"><span class="actionscript">          Text: <span class="string">"文字"</span>,</span></span><br><span class="line"><span class="actionscript">          White: <span class="string">"白"</span>,</span></span><br><span class="line"><span class="actionscript">          Black: <span class="string">"黑"</span>,</span></span><br><span class="line"><span class="actionscript">          Red: <span class="string">"红"</span>,</span></span><br><span class="line"><span class="actionscript">          Green: <span class="string">"绿"</span>,</span></span><br><span class="line"><span class="actionscript">          Blue: <span class="string">"蓝"</span>,</span></span><br><span class="line"><span class="actionscript">          Yellow: <span class="string">"黄"</span>,</span></span><br><span class="line"><span class="actionscript">          Magenta: <span class="string">"紫红"</span>,</span></span><br><span class="line"><span class="actionscript">          Cyan: <span class="string">"青"</span>,</span></span><br><span class="line"><span class="actionscript">          Background: <span class="string">"背景"</span>,</span></span><br><span class="line"><span class="actionscript">          Window: <span class="string">"视窗"</span>,</span></span><br><span class="line"><span class="actionscript">          Transparent: <span class="string">"透明"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Semi-Transparent"</span>: <span class="string">"半透明"</span>,</span></span><br><span class="line"><span class="actionscript">          Opaque: <span class="string">"不透明"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Font Size"</span>: <span class="string">"字体尺寸"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Text Edge Style"</span>: <span class="string">"字体边缘样式"</span>,</span></span><br><span class="line"><span class="actionscript">          None: <span class="string">"无"</span>,</span></span><br><span class="line"><span class="actionscript">          Raised: <span class="string">"浮雕"</span>,</span></span><br><span class="line"><span class="actionscript">          Depressed: <span class="string">"压低"</span>,</span></span><br><span class="line"><span class="actionscript">          Uniform: <span class="string">"均匀"</span>,</span></span><br><span class="line"><span class="actionscript">          Dropshadow: <span class="string">"下阴影"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Font Family"</span>: <span class="string">"字体库"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Proportional Sans-Serif"</span>: <span class="string">"比例无细体"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Monospace Sans-Serif"</span>: <span class="string">"单间隔无细体"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Proportional Serif"</span>: <span class="string">"比例细体"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Monospace Serif"</span>: <span class="string">"单间隔细体"</span>,</span></span><br><span class="line"><span class="actionscript">          Casual: <span class="string">"舒适"</span>,</span></span><br><span class="line"><span class="actionscript">          Script: <span class="string">"手写体"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Small Caps"</span>: <span class="string">"小型大写字体"</span>,</span></span><br><span class="line"><span class="actionscript">          Reset: <span class="string">"重启"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"restore all settings to the default values"</span>: <span class="string">"恢复全部设定至预设值"</span>,</span></span><br><span class="line"><span class="actionscript">          Done: <span class="string">"完成"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Caption Settings Dialog"</span>: <span class="string">"字幕设定视窗"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"Beginning of dialog window. Escape will cancel and close the window."</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="string">"开始对话视窗。离开会取消及关闭视窗"</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="string">"End of dialog window."</span>: <span class="string">"结束对话视窗"</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> myPlayer = videojs(<span class="string">"my-video"</span>);</span></span><br><span class="line"><span class="actionscript">        videojs(<span class="string">"my-video"</span>).ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> myPlayer = <span class="keyword">this</span>;</span></span><br><span class="line">          myPlayer.play();</span><br><span class="line">        &#125;);</span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;现在越来越多的网站采用 m3u8 的方式来播放视频,但是原生的浏览器(除 Safari 外)都不支持,经搜索发现 video-js 可以将 m3u8 嵌到网页中,特记录之…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="音视频" scheme="https://liusblog.top/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
      <category term="HTML" scheme="https://liusblog.top/tags/HTML/"/>
    
      <category term="m3u8" scheme="https://liusblog.top/tags/m3u8/"/>
    
      <category term="video-js" scheme="https://liusblog.top/tags/video-js/"/>
    
  </entry>
  
  <entry>
    <title>Qt调用Python进阶篇</title>
    <link href="https://liusblog.top/2020/03/01/Qt%E8%B0%83%E7%94%A8Python%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <id>https://liusblog.top/2020/03/01/Qt调用Python进阶篇/</id>
    <published>2020-03-01T13:24:21.000Z</published>
    <updated>2020-05-06T12:27:49.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在上一篇中介绍了 Qt 调用 Python 的入门操作,这一篇中我们来看看还有哪些更高级的用法</p></blockquote><h2 id="写作原因"><a href="#写作原因" class="headerlink" title="写作原因"></a>写作原因</h2><p>在实际使用中可能有保密的需求,毕竟谁也不想自己辛辛苦苦写的 Python 代码就这么变成赤裸的小羔羊,在一篇<a href="/2020/03/01/Qt调用Python并打包发布/index.html">Qt 调用 Python 并打包发布</a>中我们介绍了基本用法,回避这个问题的方法是将 python 文件放到 Qt 的资源系统中去,然后读取文本文件内容调用 python 的最简单的执行函数<em>PyRun_SimpleString</em>,但这很明显不能满足需求,下面就如何解决这个问题记录下.</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>将文件放到资源中打包(避免源码泄露)</li><li>编写 Python 加载函数(参照了开源方案)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DemoPython.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PrintHello</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello  %s"</span> % name);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line"></span><br><span class="line"><span class="comment">#if __name__ == '__main__':</span></span><br><span class="line"><span class="comment">#    PrintHello("Spygg");</span></span><br><span class="line"><span class="comment">#    add(3, 4)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ol start="3"><li>遇到的坑</li></ol><ul><li>在 windows 中运行 mingw32 版 Qt 时一定要使用 -lpython34 的形式</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引入Python模块</span></span><br><span class="line"><span class="attribute">LIBS</span> += -Lc:/python34/libs -lpython34</span><br></pre></td></tr></table></figure><ul><li>在引入 python.h 之前添加 cmath,不然会报找不到::hypot 之类的错误</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> slots</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> slots Q_SLOTS</span></span><br></pre></td></tr></table></figure><p>最终运行的结果<img src="/photos/Qt调用Python进阶篇/运行示意图.webp" alt="如图"></p><h2 id="其他开源解决方案"><a href="#其他开源解决方案" class="headerlink" title="其他开源解决方案"></a>其他开源解决方案</h2><p>经过一阵搜索找到了一个开源模块叫<a href="https://github.com/MeVisLab/pythonqt" target="_blank" rel="noopener">PythonQt</a>一般来用有点笨重,有兴趣的同学自己可以研究下</p><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>核心代码如下,主要参考了 PythonQt 项目</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"callpython.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">CallPython::CallPython():</span><br><span class="line">    m_bInitOk(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    m_object = <span class="literal">NULL</span>;</span><br><span class="line">    Py_Initialize();   <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    m_bInitOk = Py_IsInitialized();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CallPython::~CallPython()</span><br><span class="line">&#123;</span><br><span class="line">    Py_Finalize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PyObject *<span class="title">CallPython::getMainModule</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *dict = PyImport_GetModuleDict();</span><br><span class="line">    <span class="keyword">return</span> PyDict_GetItemString(dict, <span class="string">"__main__"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PyObject *<span class="title">CallPython::lookupObject</span><span class="params">(PyObject* <span class="keyword">module</span>, <span class="keyword">const</span> QString&amp; name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QStringList l = name.split(<span class="string">'.'</span>);</span><br><span class="line">    PyObject* p = <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    QByteArray b;</span><br><span class="line">    <span class="keyword">for</span> (QStringList::ConstIterator i = l.<span class="built_in">begin</span>(); i!=l.<span class="built_in">end</span>() &amp;&amp; p; ++i) &#123;</span><br><span class="line">        b = QStringToPythonEncoding(*i);</span><br><span class="line">        <span class="keyword">if</span> (PyDict_Check(p)) &#123;</span><br><span class="line">            p = PyDict_GetItemString(p, b.data());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p = PyObject_GetAttrString(p, b.data());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    PyErr_Clear();</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">PyObject* <span class="title">CallPython::lookupCallable</span><span class="params">(PyObject* <span class="keyword">module</span>, <span class="keyword">const</span> QString&amp; name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject* p = lookupObject(<span class="keyword">module</span>, name);</span><br><span class="line">    <span class="keyword">if</span> (p) &#123;</span><br><span class="line">        <span class="keyword">if</span> (PyCallable_Check(p)) &#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    PyErr_Clear();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CallPython::execSimpleString</span><span class="params">(QString ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PyRun_SimpleString(ps.toUtf8().constData());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QVariant <span class="title">CallPython::callMethod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *method, <span class="keyword">const</span> QVariantList&amp; args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!m_object)&#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"请先加载文件"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyObject* methodobj = PyObject_GetAttrString(m_object, method);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(methodobj)&#123;</span><br><span class="line">        PyObject* r = callAndReturnPyObject(methodobj, args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(r)&#123;</span><br><span class="line">            <span class="keyword">return</span> PyConvert::PyObjToQVariant(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            qDebug() &lt;&lt; QString(<span class="string">"调用函数 %1 时发生了异常!"</span>).arg(method);</span><br><span class="line"><span class="comment">//            handleError();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        qDebug() &lt;&lt; QString(<span class="string">"没有找到函数: %1 "</span>).arg(method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyErr_Clear();</span><br><span class="line">    <span class="keyword">return</span> QVariant();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PyObject* <span class="title">CallPython::callAndReturnPyObject</span><span class="params">(PyObject* callable, <span class="keyword">const</span> QVariantList&amp; args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject* result = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callable) &#123;</span><br><span class="line">        <span class="keyword">bool</span> err = <span class="literal">false</span>;</span><br><span class="line">        PyObject* pargs;</span><br><span class="line">        <span class="keyword">int</span> count = args.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span> ) &#123; <span class="comment">// create empty tuple if kwargs are given</span></span><br><span class="line">            pargs = PyTuple_New(count);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// transform QVariant arguments to Python</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                PyObject* arg = PyConvert::QVariantToPyObject(args.at(i));</span><br><span class="line">                <span class="keyword">if</span> (arg) &#123;</span><br><span class="line">                    <span class="comment">// steals reference, no unref</span></span><br><span class="line">                    PyTuple_SetItem(pargs, i,arg);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    err = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            <span class="comment">// do a direct call if we have no keyword arguments</span></span><br><span class="line">            PyErr_Clear();</span><br><span class="line">            result = PyObject_CallObject(callable, pargs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CallPython::loadPythonFile</span><span class="params">(QString fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(fileName)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(file.<span class="built_in">open</span>(QIODevice::ReadOnly))&#123;</span><br><span class="line">        QByteArray data = file.readAll();</span><br><span class="line">        <span class="keyword">if</span> (m_object)&#123;</span><br><span class="line">            Py_DECREF(m_object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_object = getMainModule();</span><br><span class="line">        PyObject *code = compileSource(fileName, data);</span><br><span class="line">        <span class="keyword">if</span> (code) &#123;</span><br><span class="line">            evalCode(m_object, code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">QVariant <span class="title">CallPython::evalCode</span><span class="params">(PyObject* object, PyObject* pycode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QVariant result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pycode) &#123;</span><br><span class="line">        PyObject* dict = <span class="literal">NULL</span>;</span><br><span class="line">        PyObject* globals = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PyModule_Check(object)) &#123;</span><br><span class="line">            dict = PyModule_GetDict(object);</span><br><span class="line">            globals = dict;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PyDict_Check(object)) &#123;</span><br><span class="line">            dict = object;</span><br><span class="line">            globals = dict;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dict = PyObject_GetAttrString(object, <span class="string">"__dict__"</span>);</span><br><span class="line">            globals = PyObject_GetAttrString(PyImport_ImportModule(PyString_AS_STRING(PyObject_GetAttrString(object, <span class="string">"__module__"</span>))),<span class="string">"__dict__"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PyObject* r = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dict) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PY3K</span></span><br><span class="line">            r = PyEval_EvalCode(pycode, globals, dict);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            r = PyEval_EvalCode((PyCodeObject*)pycode, globals, dict);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r) &#123;</span><br><span class="line">            Py_DECREF(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            handleError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        handleError();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallPython::handleError</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyErr_Print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">PyObject *<span class="title">CallPython::compileSource</span><span class="params">(<span class="keyword">const</span> QString&amp; path, <span class="keyword">const</span> QByteArray&amp; data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *code;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PY3K</span></span><br><span class="line">    PyObject* filename = PyConvert::QStringToPyObject(path);</span><br><span class="line">    code = Py_CompileStringObject(data.data(), filename,</span><br><span class="line">                                  Py_file_input, <span class="literal">NULL</span>, <span class="number">-1</span>);</span><br><span class="line">    Py_DECREF(filename);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    code = Py_CompileString(data.data(), QStringToPythonConstCharPointer(path),</span><br><span class="line">                            Py_file_input);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PPS"><a href="#PPS" class="headerlink" title="PPS"></a>PPS</h2><p>由于打包的问题还没搞定就不放完整工程了,有需要的小伙伴可以联系我<br><a href="/attachment/Qt调用Python进阶篇/xxx.zip">完整工程(fake)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在上一篇中介绍了 Qt 调用 Python 的入门操作,这一篇中我们来看看还有哪些更高级的用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;写作原因&quot;&gt;&lt;a href=&quot;#写作原因&quot; class=&quot;headerlink&quot; title=&quot;写作
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://liusblog.top/tags/Qt/"/>
    
      <category term="Python" scheme="https://liusblog.top/tags/Python/"/>
    
      <category term="调用" scheme="https://liusblog.top/tags/%E8%B0%83%E7%94%A8/"/>
    
      <category term="进阶" scheme="https://liusblog.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>Qt调用Python并打包发布</title>
    <link href="https://liusblog.top/2020/03/01/Qt%E8%B0%83%E7%94%A8Python%E5%B9%B6%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/"/>
    <id>https://liusblog.top/2020/03/01/Qt调用Python并打包发布/</id>
    <published>2020-02-29T16:54:10.000Z</published>
    <updated>2020-02-29T23:47:38.263Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工作中突然遇到 Qt 调用 Python 脚本的情况,研究下并记录<strong>填坑</strong>记录</p></blockquote><h2 id="必备步骤"><a href="#必备步骤" class="headerlink" title="必备步骤"></a>必备步骤</h2><ol><li>引入头文件和库</li><li>在代码中引入 python.h</li><li>初始化代码,并调用 PyRun_SimpleString 系列函数</li></ol><h3 id="新建一个-pri-工程"><a href="#新建一个-pri-工程" class="headerlink" title="新建一个 pri 工程"></a>新建一个 pri 工程</h3><p>为啥要弄个 pri 包含呢?这样可以很好的实现代码分离</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH += <span class="symbol">$</span><span class="symbol">$</span>PWD</span><br><span class="line"></span><br><span class="line">HEADERS += \</span><br><span class="line">    <span class="symbol">$</span><span class="symbol">$</span>PWD/callpython.h</span><br><span class="line"></span><br><span class="line">SOURCES += \</span><br><span class="line">    <span class="symbol">$</span><span class="symbol">$</span>PWD/callpython.cpp</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += <span class="string">"c:/python34/include"</span></span><br><span class="line">LIBS += <span class="string">"c:/python34/libs/python34.lib"</span></span><br></pre></td></tr></table></figure><h3 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;<span class="module-access"><span class="module"><span class="identifier">Python</span>.</span></span>h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.......</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="constructor">Py_Initialize()</span>;   <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="constructor">Py_IsInitialized()</span>)</span><br><span class="line">        return;</span><br><span class="line">    <span class="constructor">PyRun_SimpleString(<span class="string">"print('hello python from Qt')"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="填坑记录"><a href="#填坑记录" class="headerlink" title="填坑记录"></a>填坑记录</h2><h3 id="python-和-Qt-的-slot-冲突"><a href="#python-和-Qt-的-slot-冲突" class="headerlink" title="python 和 Qt 的 slot 冲突"></a>python 和 Qt 的 slot 冲突</h3><ol><li>错误为</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object.h:<span class="number">435</span>: <span class="keyword">error</span>: expected unqualified-<span class="built_in">id</span> <span class="keyword">before</span> ';' token</span><br><span class="line">     PyType_Slot *slots; /* terminated <span class="keyword">by</span> slot==<span class="number">0.</span> */</span><br><span class="line">                       ^</span><br></pre></td></tr></table></figure><ol start="2"><li>解决方法:</li></ol><ul><li>方案 1: 避免使用 QObject 及子类</li><li>方案 2: 在引用 ptyhon.h 的位置前重新定义 slots,详见文末代码工程</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意人引入位置</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> slots</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> slots Q_SLOTS</span></span><br></pre></td></tr></table></figure><ul><li>方案 3: 网上一般做法修改 python 的头文件(不推荐)</li></ul><h3 id="打包后运行崩溃"><a href="#打包后运行崩溃" class="headerlink" title="打包后运行崩溃"></a>打包后运行崩溃</h3><ol><li>崩溃为</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal Python error: Py_Initialize: unable <span class="keyword">to</span> load the file<span class="built_in"> system </span>codec ImportError: <span class="literal">No</span> module named <span class="string">'encodings'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>经过一阵乱撸想到以前用<strong>pyinstaller</strong>发布程序明明可以不需要 python 环境啊,经测试可行的方法为:<ul><li>先随便写个.py 代码,使用 pyinstaller 发布<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller <span class="keyword">test</span>.py</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>拷贝 dist 目录下得所有文件到要打包 qt 的目录下</li><li>将 base_library.zip 解压到要打包的 qt 目录下<br>不崩溃了</li></ul><ol start="3"><li>继续报错</li></ol><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Failed <span class="keyword">to</span> <span class="keyword">import</span> the site <span class="built_in">module</span></span><br><span class="line">ImportError: No <span class="built_in">module</span> named <span class="string">'site'</span></span><br></pre></td></tr></table></figure><p>搜索 site.py 文件也放到 qt 打包目录下,打完收招</p><h2 id="示例工程"><a href="#示例工程" class="headerlink" title="示例工程"></a>示例工程</h2><p>文末还是给出示例工程,外加打包好的程序哦<a href="/attachment/Qt调用Python并打包发布/qtCallPython.zip">代码和可执行程序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;工作中突然遇到 Qt 调用 Python 脚本的情况,研究下并记录&lt;strong&gt;填坑&lt;/strong&gt;记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;必备步骤&quot;&gt;&lt;a href=&quot;#必备步骤&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://liusblog.top/tags/Qt/"/>
    
      <category term="Python" scheme="https://liusblog.top/tags/Python/"/>
    
      <category term="打包" scheme="https://liusblog.top/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>镜像网站和自定义域名</title>
    <link href="https://liusblog.top/2020/02/23/%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <id>https://liusblog.top/2020/02/23/镜像网站和自定义域名/</id>
    <published>2020-02-23T14:42:28.000Z</published>
    <updated>2020-03-01T15:23:32.288Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于众所周知的原因,github 经常抽风,偶尔了解到 netlify 可以镜像本网站,于是特记录之….</p></blockquote><h2 id="多个-git-账号同步"><a href="#多个-git-账号同步" class="headerlink" title="多个 git 账号同步"></a>多个 git 账号同步</h2><p>在 .ssh 文件夹下生成一个 config 文件配置好各个私钥.如下示例.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">gitcafe.com</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">~/.ssh/gitcafe</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Host</span> <span class="string">github.com</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Host</span> <span class="string">git.oschina.net</span></span><br><span class="line"><span class="attr">IdentityFile</span> <span class="string">~/.ssh/chitanda_osc</span></span><br></pre></td></tr></table></figure><h2 id="netfily-镜像"><a href="#netfily-镜像" class="headerlink" title="netfily 镜像"></a>netfily 镜像</h2><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p><a href="https://app.netlify.com/" target="_blank" rel="noopener">Netlify 官网网站</a>然后使用 github 账号登录</p><h3 id="创建网站"><a href="#创建网站" class="headerlink" title="创建网站"></a>创建网站</h3><ul><li>点击 New site from Git 按钮</li><li>选择你需要部署的仓库(就是那个 username.github.io )</li><li>完成之后点击途中 deploy site 按钮</li></ul><h3 id="设置域名，绑定域名"><a href="#设置域名，绑定域名" class="headerlink" title="设置域名，绑定域名"></a>设置域名，绑定域名</h3><ul><li><p>可以看到 netlify 为我们随机生成了一个 netlify 下的域名，这里我们可以更改其前缀，并绑定到我们自己的域名下：</p></li><li><p>更改 netlify 域名前缀：点击上图中 Site settings 按钮，然后在下方点击 Change site name 按钮，然后在弹出框中输入自己需要更改的前缀名，点击保存即可，如下图所示：</p></li></ul><p><img src="/photos/镜像网站和自定义域名/更改名称.webp" alt="图片"></p><ul><li>如果有自定义域名可以使用 https 加密之类的,本屌就到这里就行…</li></ul><h3 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h3><p><a href="https://www.cnblogs.com/codernie/p/9062104.html" target="_blank" rel="noopener">手把手教你使用 netlify 实现前端的 自动部署 + HTTPS</a></p><p>最牛逼的是在 github 上部署完毕后,netlify 会<strong>自动更新同步</strong>….</p><hr><h2 id="码云镜像"><a href="#码云镜像" class="headerlink" title="码云镜像"></a>码云镜像</h2><ul><li>方法一:(必须码云和 github 同一个邮箱)<br>修改_config.yml 配置文件中添加码云</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">repo</span>:</span><br><span class="line">    <span class="attribute">github</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:spygg/spygg.github.io.git</span><br><span class="line">    ##<span class="attribute">gitee</span>: git<span class="variable">@gitee</span>.<span class="attribute">com</span>:spygg/spygg.git</span><br></pre></td></tr></table></figure><ul><li>方法二:<br>在码云中新建一个和你用户名一样的库,<strong>新建的时候选择导入库</strong> 导入的地址就是你 github 这个地址<br>如<a href="https://github.com/spygg/spygg.github.io" target="_blank" rel="noopener">https://github.com/spygg/spygg.github.io</a></li></ul><h2 id="自定义域名解析"><a href="#自定义域名解析" class="headerlink" title="自定义域名解析"></a>自定义域名解析</h2><ul><li>到阿里云购买一个域名</li><li>在阿里控制台中添加域名解析</li><li>在 github 工程设置中设置解析地址</li><li>设置 CNAME<ol><li>将 CNAME 放到 source 根目录下</li><li>内容只有一个(知乎上搜的是错误示范)<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">liusblog.<span class="built_in">top</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>要重新设置 gitalk 的回调主页为最新域名</p><h3 id="支持多个-gitalk-方法"><a href="#支持多个-gitalk-方法" class="headerlink" title="支持多个 gitalk 方法"></a>支持多个 gitalk 方法</h3><ol><li>在 github 上新申请一个 <strong>OAuth Apps</strong></li><li>修改主题目录下的_config.yml 文件,添加一条 gitee 的记录</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Gitalk评论</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">   <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">clientID:</span> <span class="string">6c31603d4df9afc8351b</span></span><br><span class="line">   <span class="attr">clientSecret:</span> <span class="string">c9e81f3ac1492550170fccb28c0f8bb16e3b7ed1</span></span><br><span class="line">   <span class="attr">repo:</span> <span class="string">blogcomment</span></span><br><span class="line">   <span class="attr">owner:</span> <span class="string">spygg</span></span><br><span class="line">   <span class="attr">admin:</span> <span class="string">spygg</span></span><br><span class="line">   <span class="attr">id:</span> <span class="string">window.location.pathname</span></span><br><span class="line">   <span class="comment"># perPage:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">gitalkgitee:</span></span><br><span class="line">   <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">clientID:</span> <span class="string">2e6379556d0bea565323</span></span><br><span class="line">   <span class="attr">clientSecret:</span> <span class="string">2feb2ad5f1301351c79e1d0e2b1a177bb0661ed7</span></span><br><span class="line">   <span class="attr">repo:</span> <span class="string">blogcomment</span></span><br><span class="line">   <span class="attr">owner:</span> <span class="string">spygg</span></span><br><span class="line">   <span class="attr">admin:</span> <span class="string">spygg</span></span><br><span class="line">   <span class="attr">id:</span> <span class="string">window.location.pathname</span></span><br></pre></td></tr></table></figure><ol start="3"><li>修改 gitalk.ejs 文件,主要是判断域名来加载不同的 oauth</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/gitalk/1.6.0/gitalk.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/gitalk/1.6.0/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> gitalk;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(<span class="built_in">window</span>.location.host === <span class="string">'spygg.gitee.io'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">        gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Gitalk配置</span></span></span><br><span class="line"><span class="actionscript">            clientID: <span class="string">"&lt;%= theme.gitalkgitee.clientID%&gt;"</span>,</span></span><br><span class="line"><span class="actionscript">            clientSecret: <span class="string">"&lt;%= theme.gitalkgitee.clientSecret%&gt;"</span>,</span></span><br><span class="line"><span class="actionscript">            repo: <span class="string">"&lt;%= theme.gitalkgitee.repo%&gt;"</span>,</span></span><br><span class="line"><span class="actionscript">            owner: <span class="string">"&lt;%= theme.gitalkgitee.owner%&gt;"</span>,</span></span><br><span class="line"><span class="actionscript">            admin: [<span class="string">"&lt;%= theme.gitalkgitee.admin%&gt;"</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">            id: md5(<span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.gitalkgitee.id</span>%&gt;</span>),</span></span></span><br><span class="line"><span class="actionscript">            distractionFreeMode: <span class="literal">true</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">        gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// Gitalk配置</span></span></span><br><span class="line"><span class="actionscript">            clientID: <span class="string">"&lt;%= theme.gitalk.clientID%&gt;"</span>,</span></span><br><span class="line"><span class="actionscript">            clientSecret: <span class="string">"&lt;%= theme.gitalk.clientSecret%&gt;"</span>,</span></span><br><span class="line"><span class="actionscript">            repo: <span class="string">"&lt;%= theme.gitalk.repo%&gt;"</span>,</span></span><br><span class="line"><span class="actionscript">            owner: <span class="string">"&lt;%= theme.gitalk.owner%&gt;"</span>,</span></span><br><span class="line"><span class="actionscript">            admin: [<span class="string">"&lt;%= theme.gitalk.admin%&gt;"</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">            id: md5(<span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.gitalk.id</span>%&gt;</span>),</span></span></span><br><span class="line"><span class="actionscript">            distractionFreeMode: <span class="literal">true</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    gitalk.render(<span class="string">'gitalk-container'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CDN-加速"><a href="#CDN-加速" class="headerlink" title="CDN 加速"></a>CDN 加速</h2><ul><li>在主题的_config.yml 中添加 bootstrap 和 fontAwesome 的 CDN</li><li>替换主页的背景图片和头像为 gittee 的绝对路径链接</li><li>替换 default,tagcanvas,gitment 等 css 到 gitee 的绝对路径链接</li></ul><p>###优化图片</p><ul><li>参考<a href="https://www.cnblogs.com/toumingbai/p/8298289.html" target="_blank" rel="noopener">使用 FFMPEG 压缩 png 图片 与 tinypng 压缩结果对比</a></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">好吧 看来需要优化一下调色板</span><br><span class="line"></span><br><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="keyword">in</span><span class="selector-class">.webp</span> -vf palettegen=max_colors=<span class="number">256</span>:stats_mode=single -y out_3.webp</span><br><span class="line"></span><br><span class="line">这里的输出结果是一个调色板 并不是完整图像 由于这是单张静图所以mode使用的是single</span><br><span class="line"></span><br><span class="line">这个参数有几种具体区别可以看文档 http:<span class="comment">//ffmpeg.org/ffmpeg-all.html#palettegen-1</span></span><br><span class="line"></span><br><span class="line">再用优化过的调色板去转换 得到结果 <span class="number">116</span> KB</span><br><span class="line"></span><br><span class="line">ffmpeg -<span class="selector-tag">i</span> <span class="keyword">in</span><span class="selector-class">.webp</span> -<span class="selector-tag">i</span> out_3<span class="selector-class">.webp</span> -lavfi <span class="string">"[0][1:v] paletteuse"</span> -pix_fmt pal8 -y out_4.webp</span><br></pre></td></tr></table></figure><ul><li>批量转化 webp 脚本</li></ul><ol><li>下载 google 的 <a href="https://developers.google.com/speed/webp/download" target="_blank" rel="noopener">cwebp</a></li><li>编写脚本</li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"></span><br><span class="line">def walk(<span class="built_in">path</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> <span class="built_in">os</span>.walk(<span class="built_in">path</span>, topdown=False):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line"></span><br><span class="line">            filename = <span class="built_in">os</span>.<span class="built_in">path</span>.join(root, name)</span><br><span class="line"></span><br><span class="line">            picname = <span class="built_in">os</span>.<span class="built_in">path</span>.splitext(filename)[<span class="number">0</span>]</span><br><span class="line">            ext = <span class="built_in">os</span>.<span class="built_in">path</span>.splitext(filename)[<span class="number">-1</span>][<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            cmd = <span class="string">"cwebp -q 20 %s -o %s.webp"</span> % (filename, picname)</span><br><span class="line">            <span class="keyword">if</span> ext == <span class="string">'png'</span> <span class="keyword">or</span> ext == <span class="string">'jpg'</span> <span class="keyword">or</span> ext == <span class="string">'jpeg'</span>:</span><br><span class="line">                <span class="built_in">print</span>(cmd)</span><br><span class="line">                <span class="built_in">output</span> = <span class="built_in">os</span>.<span class="built_in">popen</span>(cmd)</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">output</span>.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line">walk(<span class="string">'./source'</span>)</span><br></pre></td></tr></table></figure><h2 id="去掉影响大户"><a href="#去掉影响大户" class="headerlink" title="去掉影响大户"></a>去掉影响大户</h2><p>经过 chrome 和 google console 控制台测试发现除了图片大问题外,还有就是<strong>卜算子</strong>访客统计导致网页刷新出来缓慢,去掉后基本秒开….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于众所周知的原因,github 经常抽风,偶尔了解到 netlify 可以镜像本网站,于是特记录之….&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;多个-git-账号同步&quot;&gt;&lt;a href=&quot;#多个-git-账号同步&quot; class=&quot;he
      
    
    </summary>
    
      <category term="杂谈" scheme="https://liusblog.top/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="netlify" scheme="https://liusblog.top/tags/netlify/"/>
    
      <category term="镜像" scheme="https://liusblog.top/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="加速" scheme="https://liusblog.top/tags/%E5%8A%A0%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>Qt中的矩阵计算库eigen</title>
    <link href="https://liusblog.top/2020/02/23/Qt%E4%B8%AD%E7%9A%84%E7%9F%A9%E9%98%B5%E8%AE%A1%E7%AE%97%E5%BA%93eigen/"/>
    <id>https://liusblog.top/2020/02/23/Qt中的矩阵计算库eigen/</id>
    <published>2020-02-23T09:39:16.000Z</published>
    <updated>2020-02-23T10:15:28.898Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在实际工程中由于需要使用矩阵计算,网上搜罗了下,发现 eigen 库比较靠谱,这里简要介绍下食用方法,以及如何避免运行断言</p></blockquote><h2 id="下载库"><a href="#下载库" class="headerlink" title="下载库"></a>下载库</h2><p><a href="http://eigen.tuxfamily.org/" target="_blank" rel="noopener">eigen 官网</a></p><h2 id="引入到-Qt-工程中"><a href="#引入到-Qt-工程中" class="headerlink" title="引入到 Qt 工程中"></a>引入到 Qt 工程中</h2><ul><li>将 源码中的 的 Eigen 目录拷贝到 Qt 工程的目录</li><li>目录中新建 eigen.pri 文件内容如下</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCLUDEPATH += <span class="symbol">$</span><span class="symbol">$</span>PWD</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>新建 C++类</li><li>在头文件中添加</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Geometry&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>cpp 文件示例</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">using namespace Eigen;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.......</span></span><br><span class="line"><span class="comment">//一维矩阵</span></span><br><span class="line">VectorXf <span class="constructor">V(20)</span>;</span><br><span class="line"><span class="comment">//赋值,一维元素引用和赋值</span></span><br><span class="line">for(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">    <span class="constructor">V(<span class="params">i</span>)</span> = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MatrixXf <span class="constructor">M(10, 20)</span>;</span><br><span class="line"><span class="comment">//矩阵赋值和引用</span></span><br><span class="line">for(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    for(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)&#123;</span><br><span class="line">        <span class="constructor">M(<span class="params">i</span>, <span class="params">j</span>)</span> = (i<span class="operator"> * </span><span class="number">20</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矩阵相乘</span></span><br><span class="line">VectorXf <span class="constructor">V2(10)</span>;</span><br><span class="line">V2 = M<span class="operator"> * </span>V;</span><br></pre></td></tr></table></figure><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>如果不慎失误矩阵的维数不一致可能导致运行时 assert 错误,经过查看源代码发现可以定义 EIGEN_NO_DEBUG 即可,更简单的方法为在 pri 文件中添加语句,修改后的 pri 文件如下</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#CONFIG(debug, debug|release):&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#&#125;</span></span><br><span class="line"><span class="meta">#else&#123;</span></span><br><span class="line"><span class="meta">##release版本</span></span><br><span class="line"><span class="meta">#    DEFINES += EIGEN_NO_DEBUG</span></span><br><span class="line"><span class="meta">#&#125;</span></span><br><span class="line"></span><br><span class="line">DEFINES += EIGEN_NO_DEBUG</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += $$PWD</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在实际工程中由于需要使用矩阵计算,网上搜罗了下,发现 eigen 库比较靠谱,这里简要介绍下食用方法,以及如何避免运行断言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;下载库&quot;&gt;&lt;a href=&quot;#下载库&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://liusblog.top/tags/Qt/"/>
    
      <category term="矩阵" scheme="https://liusblog.top/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>导出Qt模块DLL给VC调用</title>
    <link href="https://liusblog.top/2019/10/22/%E5%AF%BC%E5%87%BAQt%E6%A8%A1%E5%9D%97DLL%E7%BB%99VC%E8%B0%83%E7%94%A8/"/>
    <id>https://liusblog.top/2019/10/22/导出Qt模块DLL给VC调用/</id>
    <published>2019-10-22T10:39:38.000Z</published>
    <updated>2020-02-23T05:43:27.959Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于Qt的强大特性,在VC开发时一直想能否导出Qt的各个模块为VC所用,本文介绍一种思路,抛砖引玉下,经测试<em>满足</em> <strong>VC 6.0</strong>及以上版本</p></blockquote><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>大家都知道MFC框架没有很好的数据库框架来用,而Qt的数据库模块简直不要太好用,于是就想能否来个<strong>乾坤大挪移</strong>呢?经过一阵乱撸,终于搞定!!!</p><h2 id="借鉴思路"><a href="#借鉴思路" class="headerlink" title="借鉴思路"></a>借鉴思路</h2><p><a href="https://blog.csdn.net/ly305750665" target="_blank" rel="noopener">雨田哥的博客</a>之 <a href="https://blog.csdn.net/ly305750665/article/details/65948096" target="_blank" rel="noopener">封装QtCore</a>,于是想除了QtCore能否将Qt的数据库模块也导出来呢?答案是肯定的</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>分为两个部分:</p><ol><li>DLL模块</li><li>测试调用程序</li></ol><h3 id="DLL编写"><a href="#DLL编写" class="headerlink" title="DLL编写"></a>DLL编写</h3><p>先说下版本,为了方便的在Windows下调用,肯定使用<strong>MSVC版本</strong>的Qt,我电脑上装了Qt 4.8.0 VS 2010版本</p><ul><li>新建Qt C++ library工程</li></ul><p>偷巧的方法为先使用Qt Creator 创建一个DLL工程,然后再用VS插件打开进行编译,经测试需要在工程文件夹下建立include文件夹放入下列文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">qsqldatabase</span><span class="selector-class">.h</span>  <span class="selector-tag">qsqlerror</span><span class="selector-class">.h</span>  <span class="selector-tag">qsqlrecord</span><span class="selector-class">.h</span></span><br><span class="line"><span class="selector-tag">qsqldriver</span><span class="selector-class">.h</span>    <span class="selector-tag">qsqlquery</span><span class="selector-class">.h</span>  <span class="selector-tag">qvariant</span><span class="selector-class">.h</span></span><br></pre></td></tr></table></figure></p><p>请注意,以上文件为真实的文件,一般在Qt安装目录下的corelib目录下(可以通过QtCreator跳转过去,一直找到真实的文件为止)</p><ul><li>代码如下</li></ul><h4 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//qsqllib.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QSQLLIB_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QSQLLIB_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/qsqldatabase.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/qsqlquery.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/qsqldriver.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/qsqlerror.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/qsqlrecord.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/qvariant.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(QSQLLIB_LIBRARY)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QSQLLIBSHARED_EXPORT  __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QSQLLIBSHARED_EXPORT  __declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSQLLIBSHARED_EXPORT</span> <span class="title">CSql</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CSql();</span><br><span class="line">    ~CSql();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">exec</span><span class="params">( QSqlQuery *query, QString queryString)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">closeDataBase</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">connectDataBase</span><span class="params">(QString dbName,</span></span></span><br><span class="line"><span class="function"><span class="params">        QString type = <span class="string">"QSQLITE"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        QString host = <span class="string">"127.0.0.1"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> port = <span class="number">-1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        QString userName = <span class="string">""</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        QString passWd = <span class="string">""</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">lastError</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QStringList <span class="title">drivers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QSqlDatabase *<span class="title">dataBase</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QSqlRecord <span class="title">tableInfo</span><span class="params">(QString table)</span></span>;</span><br><span class="line">    <span class="function">QStringList <span class="title">tables</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    QSqlDatabase m_db;</span><br><span class="line">    QStringList m_tables;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(QSQLLIB_LIBRARY)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"lib/qSqlLibd.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"lib/QtSqld4.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"lib/QtCored4.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"lib/qSqlLib.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"lib/QtSql4.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"lib/QtCore4.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QSQLLIB_H</span></span></span><br></pre></td></tr></table></figure><h4 id="Cpp文件"><a href="#Cpp文件" class="headerlink" title="Cpp文件"></a>Cpp文件</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码 qsqllib.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"qsqllib.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDir&gt;</span></span></span><br><span class="line"></span><br><span class="line">CSql::CSql()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CSql::~CSql()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_db.isOpen())&#123;</span><br><span class="line">        closeDataBase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CSql::closeDataBase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        QString connectionName = m_db.connectionName();</span><br><span class="line">        m_db.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">        m_db = QSqlDatabase();</span><br><span class="line">        QSqlDatabase::removeDatabase(connectionName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CSql::connectDataBase</span><span class="params">(QString dbName, QString type, </span></span></span><br><span class="line"><span class="function"><span class="params">QString host, <span class="keyword">int</span> port, QString userName, QString passWd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QCoreApplication::addLibraryPath(QDir::toNativeSeparators(QCoreApplication::applicationDirPath()));</span><br><span class="line">    QCoreApplication::addLibraryPath(QDir::toNativeSeparators(<span class="string">"./"</span>));</span><br><span class="line">    <span class="comment">//关闭已有连接,将m_db重置</span></span><br><span class="line">    closeDataBase();</span><br><span class="line"></span><br><span class="line">    m_db = QSqlDatabase::addDatabase(type);</span><br><span class="line"></span><br><span class="line">    m_db.setHostName(host);</span><br><span class="line">    m_db.setPort(port);</span><br><span class="line">    m_db.setUserName(userName);</span><br><span class="line">    m_db.setPassword(passWd);</span><br><span class="line">    m_db.setDatabaseName(dbName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!m_db.<span class="built_in">open</span>()) &#123;</span><br><span class="line">        <span class="comment">//关闭数据库,必须这样..</span></span><br><span class="line">        closeDataBase();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(type.compare(<span class="string">"QOCI"</span>) == <span class="number">0</span> || type.compare(<span class="string">"QODBC"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">        QStringList tl;</span><br><span class="line">        QSqlQuery query;</span><br><span class="line">        <span class="function"><span class="keyword">const</span> QLatin1String <span class="title">tableQuery</span><span class="params">(<span class="string">"select table_name from user_tables"</span>)</span></span>;</span><br><span class="line">        exec(&amp;query, tableQuery);</span><br><span class="line">        <span class="keyword">while</span> (query.next()) &#123;</span><br><span class="line">            tl.append(query.value(<span class="number">0</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_tables = tl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        m_tables = m_db.tables();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QSqlDatabase *<span class="title">CSql::dataBase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;m_db;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QSqlRecord <span class="title">CSql::tableInfo</span><span class="params">(QString table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    m_db.transaction();</span><br><span class="line">    QSqlRecord record =  m_db.record(table);</span><br><span class="line">    m_db.commit();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> record;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QStringList <span class="title">CSql::tables</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_tables;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QStringList <span class="title">drivers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QSqlDatabase::drivers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CSql::exec</span><span class="params">( QSqlQuery *query, QString queryString)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> bok = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事务</span></span><br><span class="line">    m_db.transaction();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!queryString.isEmpty())&#123;</span><br><span class="line">        bok = query-&gt;exec(queryString);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        bok = query-&gt;exec();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_db.commit();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">CSql::lastError</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_db.lastError().<span class="built_in">text</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试调用程序"><a href="#测试调用程序" class="headerlink" title="测试调用程序"></a>测试调用程序</h3><ol><li>新建一个MFC工程</li><li>加入上一步中的导出头文件(见底部链接下载即可)</li><li>对用到的头文件拷贝到当前文件夹下来(对于 VC6.0来说,必须将文件编码转为assic版本,不然会报错)</li><li>找到对应版本的.lib文件拷贝到当前目录下lib文件夹下</li><li>编写代码,如下<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> <span class="string">"include/qsqllib.h"</span></span><br><span class="line"></span><br><span class="line">void foo<span class="literal">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span> bok = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">char</span> dbName<span class="literal">[<span class="number">255</span>]</span> = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">char</span> <span class="keyword">type</span><span class="literal">[<span class="number">20</span>]</span> = &#123;<span class="number">0</span>&#125;;<span class="comment">//"QSQLITE"</span></span><br><span class="line">    <span class="built_in">char</span> host<span class="literal">[<span class="number">20</span>]</span> = &#123;<span class="number">0</span>&#125;;   <span class="comment">//"127.0.0.1",</span></span><br><span class="line">    <span class="built_in">char</span> szPort<span class="literal">[<span class="number">20</span>]</span> = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">char</span> userName<span class="literal">[<span class="number">50</span>]</span> = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">char</span> passWd<span class="literal">[<span class="number">50</span>]</span> = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    CSql sql;</span><br><span class="line">    bok = sql.connect<span class="constructor">DataBase(<span class="params">dbName</span>, <span class="params">type</span>, <span class="params">host</span>, <span class="params">atoi</span>(<span class="params">szPort</span>)</span>, userName, passWd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!bok)&#123;</span><br><span class="line">        <span class="constructor">AfxMessageBox(<span class="params">sql</span>.<span class="params">lastError</span>()</span>.<span class="keyword">to</span><span class="constructor">Local8Bit()</span>.const<span class="constructor">Data()</span>);</span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    bok = sql.exec(&amp;query, <span class="string">"select * from table"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bok)&#123;</span><br><span class="line">        <span class="keyword">while</span>(query.next<span class="literal">()</span>)&#123;</span><br><span class="line">            <span class="constructor">TRACE(<span class="string">"%d, %s\n"</span>, <span class="params">query</span>.<span class="params">value</span>(0)</span>.<span class="keyword">to</span><span class="constructor">Int()</span>,query.value(<span class="number">1</span>).<span class="keyword">to</span><span class="constructor">String()</span>.<span class="keyword">to</span><span class="constructor">Local8Bit()</span>.const<span class="constructor">Data()</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><ol><li>VC 6.0版本要求文件编码为<strong>ASSIC</strong>,Qt默认版本应该是 utf-8,所以可以通过notepad++转化,本人已经将所有的格式转化完毕,见附件<a href="/attachment/导出Qt模块DLL给VC调用/include.zip">头文件</a></li><li>对于<strong>编译错误</strong>先注释起来(为毛这样能行?因为对于DLL来说只要有个声明就行.h文件中声明的东西在对应的DLL中都已经实现了)</li><li>对于数据库提示<em>Driver not loader</em>错误,需要将sqldriver路径加入到库路径,见代码中的QCoreApplication::addLibraryPath();</li><li>数据库关闭错误说明见<a href="/2019/06/20/Qt数据库removeDatabase注意事项/">Qt数据库removeDatabase注意事项</a></li><li><p>在C语言的DLL中(本文未给出)其他版本的都OK,但是oracle老是在退出的时候崩溃,一阵乱撸之下发现有两种方法可以搞定(貌似是资源释放的问题),都不是很理想,于是就有了C++的class版本</p><ul><li><p>方法1:(勉强可以接受)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用指针</span></span><br><span class="line">QSqlQuery *query = <span class="keyword">new</span> <span class="constructor">QSqlQuery()</span>;</span><br><span class="line">bok = exec(query, <span class="string">"select * from table"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bok)&#123;</span><br><span class="line">    <span class="keyword">while</span>(query-&gt;next<span class="literal">()</span>)&#123;</span><br><span class="line">        <span class="constructor">TRACE(<span class="string">"%d, %s\n"</span>, <span class="params">query</span>-&gt;<span class="params">value</span>(0)</span>.<span class="keyword">to</span><span class="constructor">Int()</span>,query-&gt;value(<span class="number">1</span>).<span class="keyword">to</span><span class="constructor">String()</span>.<span class="keyword">to</span><span class="constructor">Local8Bit()</span>.const<span class="constructor">Data()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里要delete</span></span><br><span class="line">delete query;</span><br></pre></td></tr></table></figure></li><li><p>方法2:(有点2)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用局部区域变量来自动释放</span></span><br><span class="line">&#123;</span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    bok = exec(&amp;query, <span class="string">"select * from table"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bok)&#123;</span><br><span class="line">        <span class="keyword">while</span>(query.next<span class="literal">()</span>)&#123;</span><br><span class="line">            <span class="constructor">TRACE(<span class="string">"%d, %s\n"</span>, <span class="params">query</span>.<span class="params">value</span>(0)</span>.<span class="keyword">to</span><span class="constructor">Int()</span>, query.value(<span class="number">1</span>).<span class="keyword">to</span><span class="constructor">String()</span>.<span class="keyword">to</span><span class="constructor">Local8Bit()</span>.const<span class="constructor">Data()</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>也曾尝试将Gui相关的导出,比如QPixmap类,但是没有成功</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul><li><p>GUI类也可以成功,比如QImage,可以直接使用, QPixmap类,需要在头文件中注释掉错误行即可</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//Q_DECLARE_SHARED(<span class="name">QPixmap</span>)</span><br></pre></td></tr></table></figure></li><li><p>需要注意的是在使用GUI相关的类时会提示在使用前必须<strong>初始化QApplication</strong><br>解决方案:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在实例化QPixmap之前调用实例化QApplication</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MFC_FOO</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> *argv[] = &#123;</span><br><span class="line">        <span class="string">"foo"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QPixmap pix;</span><br><span class="line"></span><br><span class="line">    pix.loadFromData(....);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//MFC 代码  ......</span></span><br><span class="line">    <span class="comment">//          .....</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//不需要调用a的事件循环,嗯,就是这么浪..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><ul><li>附件中的头文件链接在来一遍<a href="/attachment/导出Qt模块DLL给VC调用/include.zip">头文件</a></li><li>对于最难缠的oracle数据来说,OCI版本的DLL见<a href="/attachment/导出Qt模块DLL给VC调用/oracle的oci驱动DLL.zip">oracle的oci驱动DLL</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于Qt的强大特性,在VC开发时一直想能否导出Qt的各个模块为VC所用,本文介绍一种思路,抛砖引玉下,经测试&lt;em&gt;满足&lt;/em&gt; &lt;strong&gt;VC 6.0&lt;/strong&gt;及以上版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;起源&quot;
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="Qt" scheme="https://liusblog.top/tags/Qt/"/>
    
      <category term="C" scheme="https://liusblog.top/tags/C/"/>
    
      <category term="VC 6.0" scheme="https://liusblog.top/tags/VC-6-0/"/>
    
      <category term="MFC" scheme="https://liusblog.top/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>Qt帮助系统的制作</title>
    <link href="https://liusblog.top/2019/07/03/Qt%E5%B8%AE%E5%8A%A9%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
    <id>https://liusblog.top/2019/07/03/Qt帮助系统的制作/</id>
    <published>2019-07-03T14:58:25.000Z</published>
    <updated>2020-03-01T15:11:31.475Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Qt的帮助系统很好看,观察自带的帮助都是HTML格式,当然最好的方法是使用QtWeb模块,但好多Qt版本不支持啊.想到QTextBrowser可以显示图片啥的,一阵乱撸终于搞定,分享之….</p></blockquote><h2 id="系列目录"><a href="#系列目录" class="headerlink" title="系列目录"></a>系列目录</h2><p>本文是系列教程&lt;跟随Designer源码学Qt&gt;中的一篇详见<a href="/2019/06/24/跟随Designer源码学Qt/">跟随Designer源码学Qt</a></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/../photos/跟随Designer源码学Qt/Qt帮助.webp" alt="帮助"></p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>我是拿Designer的帮助系统来操刀,首先想的是用QTextBrowser直接读取HTML文件后显示,但是悲剧的是页面中的图片全部不能正常显示,突然想到在Designer中明明可以插入图片显示啊.在Designer查看HTML源码视图中发现只能插入<strong>Qt文件系统</strong>的图片恍然大悟,于是突发奇想:如果能将帮助页面中的图片都来源于Qt的文件系统就行了,结果还真是可以!!</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li>将要制作的所有文件添加到Qt资源系统中(如果有文件夹,可以添加多次,<strong>务必</strong>全部添加上)</li><li>找个好的文本编辑器(我用的Sublime)可以进行全局替换</li><li><p>将html中的href和图片全部换为你的资源路径,(搜索href=”),<em>这一步最重要</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 替换后的示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">":/help/doc/qtdesigner-manual.html"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改css文件中的url路径为资源url路径(搜索 url)</p></li><li>编写代码读取内容后然后调用QTextBrowser的setHtml函数加载主页,然后里面的子链接要<strong>重载anchorClicked</strong>函数进行加载,如下面所示.</li></ol><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"helpsystemdialog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_helpsystemdialog.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDesktopWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line">HelpSystemDialog::HelpSystemDialog(QWidget *parent) :</span><br><span class="line">    QDialog(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::HelpSystemDialog)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    QRect <span class="built_in">rect</span> = qApp-&gt;desktop()-&gt;availableGeometry();</span><br><span class="line">    resize(<span class="built_in">rect</span>.<span class="built_in">width</span>(), <span class="built_in">rect</span>.<span class="built_in">height</span>());</span><br><span class="line">    setWindowFlags((windowFlags() &amp; ~Qt::WindowContextHelpButtonHint) | Qt::WindowMinMaxButtonsHint);</span><br><span class="line"></span><br><span class="line">    loadFile(<span class="string">":/help/doc/qtdesigner-manual.html"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HelpSystemDialog::~HelpSystemDialog()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HelpSystemDialog::loadFile</span><span class="params">(QString fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(fileName)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(file.<span class="built_in">open</span>(QIODevice::ReadOnly))&#123;</span><br><span class="line">        ui-&gt;textBrowser-&gt;setHtml(file.readAll());</span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HelpSystemDialog::on_textBrowser_anchorClicked</span><span class="params">(<span class="keyword">const</span> QUrl &amp;arg1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!arg1.path().isEmpty())&#123;</span><br><span class="line">        loadFile(arg1.path());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>好吧,没啥多说的,效果还是很不错的,主要的是可以将帮助直接封装到可执行文件中,很是炫酷哦</p><h2 id="PPS"><a href="#PPS" class="headerlink" title="PPS"></a>PPS</h2><p>我只是借用Qt的帮助,如果你自己要重写帮助可以先用HTML写好(可以在浏览器中预览还是很方便的),然后采用前文说的步骤一样是可以的,欢迎留言哦…</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>为了兼容原html,改用替换路径的形式提供,思路与前文同,同时增加了<a href="/attachment/Qt帮助系统的制作/helpDemo.zip">demo程序以供下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Qt的帮助系统很好看,观察自带的帮助都是HTML格式,当然最好的方法是使用QtWeb模块,但好多Qt版本不支持啊.想到QTextBrowser可以显示图片啥的,一阵乱撸终于搞定,分享之….&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;系列目
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="帮助系统" scheme="https://liusblog.top/tags/%E5%B8%AE%E5%8A%A9%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="QTextBrowser" scheme="https://liusblog.top/tags/QTextBrowser/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu环境搭建Qt进行Android开发</title>
    <link href="https://liusblog.top/2019/06/28/Ubuntu%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAQt%E8%BF%9B%E8%A1%8CAndroid%E5%BC%80%E5%8F%91/"/>
    <id>https://liusblog.top/2019/06/28/Ubuntu环境搭建Qt进行Android开发/</id>
    <published>2019-06-27T16:07:15.000Z</published>
    <updated>2020-03-01T15:11:31.845Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>鉴于Qt的全平台性,用来开发android对于只会用C++的人来说太合适了,但是在第一关往往都会遇到不少坑,本文将一一细数之…</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>不说搭建的环境就是耍流氓,往往遇到问题的都是运行环境的问题,好吧,先说下我的环境配置</p><ul><li>Ubuntu : 版本18.04</li><li>Qt: 版本5.12.03</li></ul><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><ol><li>去官网上下载Qt,嗯还是国内的源比较快<a href="&quot;https://mirrors.tuna.tsinghua.edu.cn/qt/&quot;">清华大学</a></li><li>安装时选择到/opt目录</li><li><p>安装jdk,必须用这个<strong>openjdk</strong>,去oracle网上下载会要登录啥的,而且会出问题</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk<span class="number">-8</span>-jdk</span><br></pre></td></tr></table></figure></li><li><p>下载android-studio(用snap方式)<br>直接去软件中心网速会非常的慢,难以忍受,<strong>解决方案</strong>如下:</p></li></ol><ul><li>前往 <a href="https://uappexplorer.com/snaps" target="_blank" rel="noopener">网址uappexplorer</a> 搜索需要的 snap 包</li><li>下载对应架构的 snap 包</li><li>下载完成后，在同一目录执行以下命令即可<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snap <span class="keyword">install</span> xxx.snap <span class="comment">--dangerous</span></span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>打开android studio后更新sdk,如果发现更新不了,去<a href="https://laod.cn" target="_blank" rel="noopener">老D</a> 或则 <a href="https://github.com/googlehosts/hosts" target="_blank" rel="noopener">网址</a>下载更新hosts</li><li><p>安装sdk,这里选择一个8.0版本的吧(也可以在Creator中安装)</p></li><li><p>打开Qt Creator<br>这里特别说明:</p></li></ol><ul><li>用OpenJDK 上面已经说过</li><li>用NDK版本为18就行,别用最新版的<a href="https://developer.android.com/ndk/downloads/" target="_blank" rel="noopener">下载网址</a><br>弄完后如下图所示<br><img src="/../photos/Ubuntu环境搭建Qt进行Android开发/QtCreator环境.webp" alt="环境截图"></li></ul><ol start="8"><li><p>打开AVD创建镜像,可能要先执行命令</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod <span class="number">777</span> /dev/kvm</span><br></pre></td></tr></table></figure></li><li><p>在android studio的avd 设置中选择皮肤</p></li></ol><h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h2><ul><li><a href="https://doc-snapshots.qt.io/qt5-5.12/android-getting-started.html" target="_blank" rel="noopener">Qt文档官网</a></li><li><a href="https://wiki.qt.io/Qt_for_Android_known_issues" target="_blank" rel="noopener">Qt_for_Android_known_issues</a></li></ul><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><ul><li>科学上网很重要</li><li>别用最新版本,很多坑的</li><li>官方文档很重要</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;鉴于Qt的全平台性,用来开发android对于只会用C++的人来说太合适了,但是在第一关往往都会遇到不少坑,本文将一一细数之…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="软件使用" scheme="https://liusblog.top/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Android" scheme="https://liusblog.top/tags/Android/"/>
    
      <category term="Ubuntu" scheme="https://liusblog.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Qt单实例运行</title>
    <link href="https://liusblog.top/2019/06/25/Qt%E5%8D%95%E5%AE%9E%E4%BE%8B%E8%BF%90%E8%A1%8C/"/>
    <id>https://liusblog.top/2019/06/25/Qt单实例运行/</id>
    <published>2019-06-25T15:05:23.000Z</published>
    <updated>2020-03-01T15:11:31.348Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在用Qt写程序时候可能遇到避免程序重复启动的问题,我们知道用MFC时有个FindWindow函数可以进行窗口查找于是想Qt能否实现呢,经过一番摸索和折腾终于搞定(测试环境为Win7和Ubuntu)</p></blockquote><h2 id="系列目录"><a href="#系列目录" class="headerlink" title="系列目录"></a>系列目录</h2><p>本文是系列教程&lt;跟随Designer源码学Qt&gt;中的一篇详见<a href="/2019/06/24/跟随Designer源码学Qt/">跟随Designer源码学Qt</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><img src="/../photos/Qt单实例运行/Qt单实例运行.webp" alt="一去二三里"><br>具体见链接<a href="https://waleon.blog.csdn.net/" target="_blank" rel="noopener">Qt学习一二三</a></p><p>根据大神的说明大致有三种:</p><ul><li>QSharedMemory</li><li>QLocalServer</li><li>QtSingleApplication<br>本文着重介绍QLocalServer,在大神的代码基础上修改了下使程序启动时判断如果已经启动则进行窗口显示</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>废话不多说直接上硬货</p><p>头文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SINGLEAPPLICATION_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SINGLEAPPLICATION_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLocalServer</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QWidget</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleApplication</span> :</span> <span class="keyword">public</span> QApplication</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SingleApplication(<span class="keyword">int</span> &amp;argc, <span class="keyword">char</span> **argv);</span><br><span class="line">    ~SingleApplication();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isRunning</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存主窗口指针</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSingleMainWindow</span><span class="params">(QWidget* w)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">newLocalConnection</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">bool</span> m_bRunning;</span><br><span class="line">    QLocalServer *m_pServer;</span><br><span class="line">    QWidget *m_widget;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SINGLEAPPLICATION_H</span></span></span><br></pre></td></tr></table></figure></p><p>cpp文件<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> <span class="string">"singleapplication.h"</span></span><br><span class="line">#<span class="keyword">include</span> &lt;QLocalSocket&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;QLocalServer&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;QFile&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;QTextStream&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;QWidget&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;QDebug&gt;</span><br><span class="line"></span><br><span class="line">static const <span class="built_in">char</span> *ApplicationName = <span class="string">"myApp"</span>;</span><br><span class="line"></span><br><span class="line">SingleApplication::<span class="constructor">SingleApplication(<span class="params">int</span> &amp;<span class="params">argc</span>, <span class="params">char</span> <span class="operator">**</span><span class="params">argv</span>)</span>:</span><br><span class="line">    <span class="constructor">QApplication(<span class="params">argc</span>, <span class="params">argv</span>)</span>,</span><br><span class="line">    m<span class="constructor">_mousePoint(0, 0)</span>,</span><br><span class="line">    m<span class="constructor">_mousePressed(<span class="params">false</span>)</span>,</span><br><span class="line">    m<span class="constructor">_bRunning(<span class="params">false</span>)</span>,</span><br><span class="line">    m<span class="constructor">_pServer(Q_NULLPTR)</span>,</span><br><span class="line">    m<span class="constructor">_widget(Q_NULLPTR)</span></span><br><span class="line">&#123;</span><br><span class="line">    set<span class="constructor">OrganizationName(QStringLiteral(<span class="string">"MyProject"</span>)</span>);</span><br><span class="line">    set<span class="constructor">ApplicationName(QLatin1String(ApplicationName)</span>);</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> !defined(Q_OS_OSX)</span><br><span class="line">    set<span class="constructor">WindowIcon(QIcon(QStringLiteral(<span class="string">":/image/calcapp.webp"</span>)</span>));</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    QString strServerName = <span class="constructor">QString(<span class="string">"%1%2"</span>)</span></span><br><span class="line">            .arg(QCoreApplication::organization<span class="constructor">Name()</span>)</span><br><span class="line">            .arg(QCoreApplication::application<span class="constructor">Name()</span>);</span><br><span class="line"></span><br><span class="line">    QLocalSocket socket;</span><br><span class="line">    socket.connect<span class="constructor">ToServer(<span class="params">strServerName</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (socket.wait<span class="constructor">ForConnected(500)</span>)&#123;</span><br><span class="line">        QTextStream stream(&amp;socket);</span><br><span class="line">        QStringList args = QCoreApplication::arguments<span class="literal">()</span>;</span><br><span class="line">        QString strArg = (args.count<span class="literal">()</span> &gt; <span class="number">1</span>) ? args.last<span class="literal">()</span> : <span class="string">""</span>;</span><br><span class="line">        stream &lt;&lt; strArg;</span><br><span class="line">        stream.flush<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        q<span class="constructor">Debug()</span> &lt;&lt; <span class="string">"Have already connected to server."</span>;</span><br><span class="line">        socket.wait<span class="constructor">ForBytesWritten()</span>;</span><br><span class="line">        m_bRunning = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 如果不能连接到服务器,则创建</span></span><br><span class="line">        m_pServer = <span class="keyword">new</span> <span class="constructor">QLocalServer(<span class="params">this</span>)</span>;</span><br><span class="line"></span><br><span class="line">        connect(m_pServer, <span class="constructor">SIGNAL(<span class="params">newConnection</span>()</span>), this, <span class="constructor">SLOT(<span class="params">newLocalConnection</span>()</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_pServer-&gt;listen(strServerName))&#123;</span><br><span class="line">            <span class="comment">// 防止程序崩溃,残留进程服务,直接移除</span></span><br><span class="line">            <span class="keyword">if</span> ((m_pServer-&gt;server<span class="constructor">Error()</span><span class="operator"> == </span>QAbstractSocket::AddressInUseError)</span><br><span class="line"><span class="operator">                    &amp;&amp; </span>QFile::exists(m_pServer-&gt;server<span class="constructor">Name()</span>))&#123;</span><br><span class="line">                QFile::remove(m_pServer-&gt;server<span class="constructor">Name()</span>);</span><br><span class="line">                m_pServer-&gt;listen(strServerName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SingleApplication::~<span class="constructor">SingleApplication()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> SingleApplication::is<span class="constructor">Running()</span></span><br><span class="line">&#123;</span><br><span class="line">    return m_bRunning;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void SingleApplication::set<span class="constructor">SingleMainWindow(QWidget <span class="operator">*</span><span class="params">w</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    m_widget = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void SingleApplication::<span class="keyword">new</span><span class="constructor">LocalConnection()</span></span><br><span class="line">&#123;</span><br><span class="line">    QLocalSocket *pSocket = m_pServer-&gt;next<span class="constructor">PendingConnection()</span>;</span><br><span class="line">    <span class="keyword">if</span> (pSocket != Q_NULLPTR)&#123;</span><br><span class="line">        pSocket-&gt;wait<span class="constructor">ForReadyRead(1000)</span>;</span><br><span class="line"></span><br><span class="line">        QTextStream <span class="keyword">in</span>(pSocket);</span><br><span class="line">        QString strValue;</span><br><span class="line">        <span class="keyword">in</span> &gt;&gt; strValue;</span><br><span class="line">        delete pSocket;</span><br><span class="line">        pSocket = Q_NULLPTR;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果窗口不为空,则前端显示</span></span><br><span class="line">        <span class="comment">//核心代码</span></span><br><span class="line">        <span class="keyword">if</span>(m_widget)&#123;</span><br><span class="line">            m_widget-&gt;show<span class="constructor">Maximized()</span>;</span><br><span class="line">            m_widget-&gt;activate<span class="constructor">Window()</span>;</span><br><span class="line">            m_widget-&gt;raise<span class="literal">()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>别忘了在pro文件中加上网络依赖<br>QT += network</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"singleapplication.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">SingleApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a.isRunning())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QDialog w;</span><br><span class="line">    w.show();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存指针用于显示</span></span><br><span class="line">    a.setSingleMainWindow(&amp;w);</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><p>在Win7上可以随心所欲的运行,不料放到Ubuntu上之后崩的噼里啪啦,经过一番折腾终于找到个大坑</p><ol><li>连接服务器的代码要放到构造函数中</li><li>setApplicationName(QLatin1String(ApplicationName));中的参数要提前定义为static const char *</li></ol><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>在使用刘典武大神的代码时AppInit 也要放到SingleApplication的构造函数中,顺便说一句 QTimer::singleShot真香</p><h2 id="PPS"><a href="#PPS" class="headerlink" title="PPS"></a>PPS</h2><p>你没有看错,我确实把大神的CSDN博客给撸下来,做成了高清无码的PDF….<br>嗯,爬虫在手,天下我有…..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在用Qt写程序时候可能遇到避免程序重复启动的问题,我们知道用MFC时有个FindWindow函数可以进行窗口查找于是想Qt能否实现呢,经过一番摸索和折腾终于搞定(测试环境为Win7和Ubuntu)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="单实例" scheme="https://liusblog.top/tags/%E5%8D%95%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="QLocalServer" scheme="https://liusblog.top/tags/QLocalServer/"/>
    
      <category term="Designer" scheme="https://liusblog.top/tags/Designer/"/>
    
  </entry>
  
  <entry>
    <title>跟随Designer源码学Qt</title>
    <link href="https://liusblog.top/2019/06/24/%E8%B7%9F%E9%9A%8FDesigner%E6%BA%90%E7%A0%81%E5%AD%A6Qt/"/>
    <id>https://liusblog.top/2019/06/24/跟随Designer源码学Qt/</id>
    <published>2019-06-24T14:05:06.000Z</published>
    <updated>2020-02-23T05:43:27.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Qt说是非常优雅的C++实现,是跨平台的不二选择.在实际学习中,好多人都会遇到学到一个阶段后突然不知道该如何进行下去了.笔者经过连续几个月对着Designer的源码进行艰苦卓绝的奋斗,终于略有小成,准备写一个系列文章,希望能给你的学习带来一点思路…</p></blockquote><p>先大致列一个提纲</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>Drag and drop</li><li>QTreeView/视图/委托 </li><li>QUiLoader(ui文件加载器)</li><li>事件拦截器</li><li>script(Qt调用JS)</li><li>sql/database(数据库)</li><li>xml(xml文件读写)</li><li>QThread多线程</li><li>qscintilla富文本移植</li><li>qtxlsx移植</li><li>QTableView和数据库绑定</li><li>QTreeWiget的使用</li><li>信号,槽的高级用法和线程</li><li>ODBC和Oracle数据那些难缠的事</li><li>Qt正则表达式</li><li>Qt帮助系统的制作</li><li>多语言系统的制作</li><li>彩蛋制作</li><li>Qt工程文件的写法和黑科技</li><li>Qt单实例运行</li></ul><p>后面会补上链接</p><h2 id="彩蛋奉上"><a href="#彩蛋奉上" class="headerlink" title="彩蛋奉上"></a>彩蛋奉上</h2><p><img src="/../photos/跟随Designer源码学Qt/彩蛋.gif" alt="彩蛋"><br>敬请期待(to be continue….)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Qt说是非常优雅的C++实现,是跨平台的不二选择.在实际学习中,好多人都会遇到学到一个阶段后突然不知道该如何进行下去了.笔者经过连续几个月对着Designer的源码进行艰苦卓绝的奋斗,终于略有小成,准备写一个系列文章,希望能给你的学习带来一点思路…
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="Designer" scheme="https://liusblog.top/tags/Designer/"/>
    
      <category term="开源" scheme="https://liusblog.top/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="源码" scheme="https://liusblog.top/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>分开旅行</title>
    <link href="https://liusblog.top/2019/06/21/%E5%88%86%E5%BC%80%E6%97%85%E8%A1%8C/"/>
    <id>https://liusblog.top/2019/06/21/分开旅行/</id>
    <published>2019-06-21T09:53:37.000Z</published>
    <updated>2020-03-01T15:15:15.202Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>众生皆苦…..</p></blockquote><h2 id="生而为人-已属不易-何苦要相互折磨"><a href="#生而为人-已属不易-何苦要相互折磨" class="headerlink" title="生而为人,已属不易,何苦要相互折磨?"></a>生而为人,已属不易,何苦要相互折磨?</h2><h2 id="纵使有千般不舍-万分难离"><a href="#纵使有千般不舍-万分难离" class="headerlink" title="纵使有千般不舍,万分难离"></a>纵使有千般不舍,万分难离</h2><h2 id="亦不如-彼此放手各自前行…"><a href="#亦不如-彼此放手各自前行…" class="headerlink" title="亦不如,彼此放手各自前行…"></a>亦不如,彼此放手各自前行…</h2><p><img src="/photos/分开旅行/分开旅行.webp" alt="分开旅行"></p><audio id="video" controls="controls" preload="auto"><br>    <source src="/media/分开旅行/分开旅行.mp3" type="audio/mpeg"><br>    <p>Your user agent does not support the HTML5 Video element.</p><br></audio><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">我选择去洛杉矶</span><br><span class="line">你 一个人要飞向巴黎</span><br><span class="line">尊重各自的决定</span><br><span class="line">维持和平的爱情</span><br><span class="line">相爱是一种习题</span><br><span class="line">在自由和亲密中游移</span><br><span class="line">你问过太多次我爱不爱你</span><br><span class="line"><span class="keyword">Black </span><span class="keyword">Black </span>Heart</span><br><span class="line"><span class="symbol">Send</span>给你我的心</span><br><span class="line">计划是分开旅行啊</span><br><span class="line">为何像结局</span><br><span class="line">我明白 停在你的怀里</span><br><span class="line">却不一定在你心里</span><br><span class="line">巴黎下了一整天雨</span><br><span class="line">我不想要去证明</span><br><span class="line">也不知道怎样证明</span><br><span class="line">相爱是两人事情</span><br><span class="line">我不喜欢你怀疑</span><br><span class="line">怀疑爱是可怕的武器</span><br><span class="line">谋杀了爱情</span><br><span class="line">我在这里 本来是晴朗好天气</span><br><span class="line"><span class="keyword">Black </span><span class="keyword">Black </span>Heart</span><br><span class="line"><span class="symbol">Send</span>给你我的心</span><br><span class="line">计划是分开旅行啊</span><br><span class="line">为何像结局</span><br><span class="line">我明白 停在你的怀里</span><br><span class="line">却不一定在你心里</span><br><span class="line">巴黎下了一整天雨</span><br><span class="line"><span class="keyword">Black </span><span class="keyword">Black </span>Heart</span><br><span class="line"><span class="symbol">Send</span>给你我的心</span><br><span class="line">计划是分开旅行啊</span><br><span class="line">为何像结局</span><br><span class="line">我明白 停在你的怀里</span><br><span class="line">却不一定在你心里</span><br><span class="line">巴黎下了一整天雨</span><br><span class="line"><span class="keyword">Black </span><span class="keyword">Black </span>Heart</span><br><span class="line"><span class="symbol">Send</span>给你我的心</span><br><span class="line">计划是分开旅行啊</span><br><span class="line">为何像结局</span><br><span class="line">我明白 停在你的怀里</span><br><span class="line">却不一定在你心里</span><br><span class="line">巴黎下了一整天雨</span><br><span class="line">休息一下 不需要那么的密集</span><br><span class="line">不必每一秒钟都黏在一起</span><br><span class="line">你问我爱不爱你</span><br><span class="line">这个不是个问题</span><br><span class="line">早就说过需要空间才能继续</span><br><span class="line">我也真的不希望你离去</span><br><span class="line">我们就试试看各走各的路</span><br><span class="line">嘘 别哭</span><br><span class="line">这个只是个短短的度假</span><br><span class="line">别搞得那么复杂</span><br><span class="line">你不是一直说要去巴黎吗</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;众生皆苦…..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;生而为人-已属不易-何苦要相互折磨&quot;&gt;&lt;a href=&quot;#生而为人-已属不易-何苦要相互折磨&quot; class=&quot;headerlink&quot; title=&quot;生而为人,已属不易,何苦要相互折
      
    
    </summary>
    
      <category term="杂谈" scheme="https://liusblog.top/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="心情" scheme="https://liusblog.top/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Qt数据库removeDatabase注意事项</title>
    <link href="https://liusblog.top/2019/06/20/Qt%E6%95%B0%E6%8D%AE%E5%BA%93removeDatabase%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://liusblog.top/2019/06/20/Qt数据库removeDatabase注意事项/</id>
    <published>2019-06-20T14:32:35.000Z</published>
    <updated>2020-03-01T15:11:31.602Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>起源:最近在研究一个项目, 其中用到了数据库,在数据库断开重连时会给出警告,经过一系列尝试终于搞定,网上找的方法大多数都是抄来抄去,很是无语…</p></blockquote><h2 id="警告示例"><a href="#警告示例" class="headerlink" title="警告示例"></a>警告示例</h2><p>内容为:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QSqlDatabasePrivate::removeDatabase:<span class="built_in"> connection </span><span class="string">'qt_sql_default_connection'</span> is still <span class="keyword">in</span> use, all queries will cease <span class="keyword">to</span> work</span><br></pre></td></tr></table></figure></p><p>如下图所示<br><img src="/photos/Qt数据库removeDatabase注意事项/警告.webp" alt="图片"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>在每一次数据库打开时先把原有连接关闭,</li><li>特别值得注意的是,在<strong>打开失败</strong>时也要关闭连接</li></ul><p>核心代码如下<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">connectDataBase</span><span class="params">(QString dbName, QString type,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      QString host, <span class="keyword">int</span> port,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      QString userName, QString passWd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//关闭已有连接,将m_db重置</span></span><br><span class="line">    closeDataBase();</span><br><span class="line"></span><br><span class="line">    m_db = QSqlDatabase::addDatabase(type);</span><br><span class="line"></span><br><span class="line">    m_db.setHostName(host);</span><br><span class="line">    m_db.setPort(port);</span><br><span class="line">    m_db.setUserName(userName);</span><br><span class="line">    m_db.setPassword(passWd);</span><br><span class="line">    m_db.setDatabaseName(dbName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!m_db.<span class="built_in">open</span>()) &#123;</span><br><span class="line">        closeDataBase();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">closeDataBase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        QString connectionName = m_db.connectionName();</span><br><span class="line">        m_db.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">        m_db = QSqlDatabase();</span><br><span class="line">        m_db.removeDatabase(connectionName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>一般不会遇到该问题,除非是多次打开重连,一般在使用时只需要使用局部变量保存database就行了,不过笔者遇到的情况比较特殊,恩,效果还是不错的….</p><h2 id="PPS"><a href="#PPS" class="headerlink" title="PPS"></a>PPS</h2><ul><li>Qt遇到问题时,首先参照自带例子</li><li>尝试到Stack Overflow上去找答案</li><li>搜索引擎首推google,但是如果你不会科学上网还是将就用<a href="https://bing.com" target="_blank" rel="noopener">必应</a>吧</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;起源:最近在研究一个项目, 其中用到了数据库,在数据库断开重连时会给出警告,经过一系列尝试终于搞定,网上找的方法大多数都是抄来抄去,很是无语…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;警告示例&quot;&gt;&lt;a href=&quot;#警告示例&quot; clas
      
    
    </summary>
    
      <category term="Qt" scheme="https://liusblog.top/categories/Qt/"/>
    
    
      <category term="QWidget" scheme="https://liusblog.top/tags/QWidget/"/>
    
      <category term="QSqlDatabasePrivate" scheme="https://liusblog.top/tags/QSqlDatabasePrivate/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu编译FFMPEG和ffplay</title>
    <link href="https://liusblog.top/2019/05/21/ubuntu%E7%BC%96%E8%AF%91FFMPEG%E5%92%8Cffplay/"/>
    <id>https://liusblog.top/2019/05/21/ubuntu编译FFMPEG和ffplay/</id>
    <published>2019-05-21T12:44:53.000Z</published>
    <updated>2020-03-01T15:11:31.970Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近突然又想研究音视频了,当然作为音视频领域必备技能FFMPEG是要了解的,本文从编译开始,希望这次能有点建树…</p></blockquote><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>到官网上下载,<a href="https://ffmpeg.org/download.html" target="_blank" rel="noopener">FFMPEG官网</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>不管三七二十一直接开干<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./configure</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="/photos/ubuntu编译FFMPEG和ffplay/提示安装yasm.webp" alt="提示错误"><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> yasm</span><br></pre></td></tr></table></figure></p><ol start="2"><li>安装SDL<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> libsdl2-dev</span><br></pre></td></tr></table></figure></li></ol><p>安装完后再配置会自动的能产生ffplay</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./configure</span></span><br></pre></td></tr></table></figure><p>如果想支持ssl请加上  –enable-openssl 并且安装 openssl, libssl-dev</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>为了加快编译速度,加上-j参数<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span> -j8</span><br></pre></td></tr></table></figure></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make <span class="keyword">install</span></span><br></pre></td></tr></table></figure><h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令行测试:ffmpeg -version</span></span><br><span class="line"><span class="comment">//文件名:   helloFFmpeg.c</span></span><br><span class="line"><span class="comment">//编译命令: gcc -o helloFFmpeg helloFFmpeg.c -lavcodec -lavdevice  -lswresample -lavformat -lavcodec -lavutil -lswscale  -lGL -lm -lz -lpthread `pkg-config --cflags --libs sdl2`</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavcodec/avcodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, avcodec_configuration());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近突然又想研究音视频了,当然作为音视频领域必备技能FFMPEG是要了解的,本文从编译开始,希望这次能有点建树…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;下载源码&quot;&gt;&lt;a href=&quot;#下载源码&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="音视频" scheme="https://liusblog.top/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
      <category term="FFMPEG" scheme="https://liusblog.top/tags/FFMPEG/"/>
    
      <category term="C" scheme="https://liusblog.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>发现一个学习英语的软件</title>
    <link href="https://liusblog.top/2019/04/27/%E5%8F%91%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
    <id>https://liusblog.top/2019/04/27/发现一个学习英语的软件/</id>
    <published>2019-04-27T12:36:26.000Z</published>
    <updated>2020-03-01T15:11:32.231Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>发现了一个学习英语的软件叫做 <strong>voscreen</strong></p></blockquote><h2 id="知乎推荐"><a href="#知乎推荐" class="headerlink" title="知乎推荐"></a>知乎推荐</h2><p><img src="/photos/发现一个学习英语的软件/知乎推荐.webp" alt="知乎推荐"></p><h2 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h2><p><a href="https://voscreen.com/" target="_blank" rel="noopener">voscreen主页</a><br>真香,谁用谁知道!</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><video id="video" controls preload="auto"><br>    <source id="mp4" src="/media/发现一个学习英语的软件/小黄人.mp4" type="video/mp4"><br>    <p>Your user agent does not support the HTML5 Video element.</p><br></video><h2 id="页面插入视频的方法"><a href="#页面插入视频的方法" class="headerlink" title="页面插入视频的方法"></a>页面插入视频的方法</h2><ul><li><p>使用Video标签(效果见上面)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">controls</span>=<span class="string">"controls"</span> <span class="attr">preload</span>=<span class="string">"auto"</span> <span class="attr">style</span>=<span class="string">"width:100%"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">id</span>=<span class="string">"mp4"</span> <span class="attr">src</span>=<span class="string">"/media/发现一个学习英语的软件/小黄人.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your user agent does not support the HTML5 Video element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用iframe(这个github不支持)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">498</span> <span class="attr">width</span>=<span class="string">510</span> <span class="attr">src</span>=<span class="string">"http://player.youku.com/embed/XNjcyMDU4Njg0"</span> <span class="attr">frameborder</span>=<span class="string">0</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;发现了一个学习英语的软件叫做 &lt;strong&gt;voscreen&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;知乎推荐&quot;&gt;&lt;a href=&quot;#知乎推荐&quot; class=&quot;headerlink&quot; title=&quot;知乎推荐&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="杂谈" scheme="https://liusblog.top/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="软件" scheme="https://liusblog.top/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="英语" scheme="https://liusblog.top/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>linux环境pip3镜像配置</title>
    <link href="https://liusblog.top/2019/04/25/linux%E7%8E%AF%E5%A2%83pip3%E9%85%8D%E7%BD%AE/"/>
    <id>https://liusblog.top/2019/04/25/linux环境pip3配置/</id>
    <published>2019-04-25T14:12:49.000Z</published>
    <updated>2020-03-01T15:11:31.224Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>手残升级Ubuntu到了19.04,突然发现自己写的<strong>必应词典</strong>失效了,但是下载速度炒鸡慢,于是就有了下文</p></blockquote><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="/photos/linux环境pip3镜像配置/我的老目录.webp" alt="必须来张图"></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">清华网站参考</a></p><h2 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -i https://pypi.tuna.tsinghua.edu.cn/simple <span class="keyword">some</span>-<span class="keyword">package</span></span><br></pre></td></tr></table></figure><h2 id="设置为默认"><a href="#设置为默认" class="headerlink" title="设置为默认"></a>设置为默认</h2><ul><li><p>使用命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="keyword">set</span> <span class="keyword">global</span>.<span class="built_in">index</span>-url http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></table></figure></li><li><p>或者直接写文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></table></figure></li></ul><h2 id="重要点"><a href="#重要点" class="headerlink" title="重要点"></a>重要点</h2><p>上述的方法只能是给pip用,要想pip3也是一样执行命令<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp .<span class="built_in">config</span>/pip/pip.conf .<span class="built_in">config</span>/pip3/</span><br></pre></td></tr></table></figure></p><h2 id="常用python包"><a href="#常用python包" class="headerlink" title="常用python包"></a>常用python包</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bencode</span>                         <span class="string"></span></span><br><span class="line"><span class="attr">bs4</span>                              <span class="string"></span></span><br><span class="line"><span class="attr">PyPDF2</span></span><br><span class="line"><span class="attr">PyQt5</span></span><br><span class="line"><span class="attr">ckeditor</span>                         <span class="string"></span></span><br><span class="line"><span class="attr">ckeditor_uploader</span>             <span class="string"></span></span><br><span class="line"><span class="attr">django</span>                                   <span class="string"></span></span><br><span class="line"><span class="attr">request</span></span><br><span class="line"><span class="attr">termcolor</span></span><br><span class="line"><span class="attr">virtualenv</span>              <span class="string"></span></span><br><span class="line"><span class="attr">lxml</span>                          <span class="string"></span></span><br><span class="line"><span class="attr">markdown</span>                         <span class="string"></span></span><br><span class="line"><span class="attr">xlrd</span></span><br><span class="line"><span class="attr">pdfkit</span>                           <span class="string"></span></span><br><span class="line"><span class="attr">xlwt</span></span><br><span class="line"><span class="attr">playsound</span>       <span class="string"></span></span><br><span class="line"><span class="attr">you_get</span></span><br></pre></td></tr></table></figure><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p><a href="https://github.com/spygg/bydict/" target="_blank" rel="noopener">必应词典github链接</a><br><img src="/photos/linux环境pip3镜像配置/必应词典.webp" alt="必应词典"></p><blockquote><p>记录下加快效率</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;手残升级Ubuntu到了19.04,突然发现自己写的&lt;strong&gt;必应词典&lt;/strong&gt;失效了,但是下载速度炒鸡慢,于是就有了下文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;图示&quot;&gt;&lt;a href=&quot;#图示&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Linux" scheme="https://liusblog.top/categories/Linux/"/>
    
    
      <category term="软件使用" scheme="https://liusblog.top/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
      <category term="python" scheme="https://liusblog.top/tags/python/"/>
    
      <category term="pip3" scheme="https://liusblog.top/tags/pip3/"/>
    
  </entry>
  
  <entry>
    <title>给页面所有的图片加上全屏预览功能</title>
    <link href="https://liusblog.top/2019/04/21/%E7%BB%99%E9%A1%B5%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84%E5%9B%BE%E7%89%87%E5%8A%A0%E4%B8%8A%E5%85%A8%E5%B1%8F%E9%A2%84%E8%A7%88%E5%8A%9F%E8%83%BD/"/>
    <id>https://liusblog.top/2019/04/21/给页面所有的图片加上全屏预览功能/</id>
    <published>2019-04-21T14:04:52.000Z</published>
    <updated>2020-03-01T15:11:32.685Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在使用主题snippet时候,图片不能全屏预览,于是自己动手写了一个,还是可以使用的</p></blockquote><h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p><img src="/photos/给页面所有的图片加上全屏预览功能/demo.webp" alt="demo"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/tholman/intense-images" target="_blank" rel="noopener">intense</a><br>但是这玩意有bug</p><h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><ul><li>在页面的head部分script中加入javscript代码,同时引入css代码</li><li>具体情况时需要改变js中的<strong>post-body</strong>  var imgs = document.getElementsByClassName(‘post-body’)[0].getElementsByTagName(‘img’)</li><li>对不需要展示的图片加上 <em>class_no_full_screen</em> 类</li><li>如果要修改背景色请修改<em>background: rgba(255, 255, 255,0.8);</em>这一句</li></ul><h2 id="直接上干货"><a href="#直接上干货" class="headerlink" title="直接上干货"></a>直接上干货</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h3><ul><li>查找所有的图片</li><li>在图片点击时候获取图片地址</li><li>在页面末尾插入一个div,div中插入一个img(地址为点击图片的地址)</li><li>设置div样式为全屏,透明</li></ul><h3 id="javscript-代码"><a href="#javscript-代码" class="headerlink" title="javscript 代码"></a>javscript 代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">hasClass</span><span class="params">(obj, cls)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> obj.className.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>));</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">addClass</span><span class="params">(obj, cls)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (!<span class="keyword">this</span>.hasClass(obj, cls)) obj.className += <span class="string">" "</span> + cls;</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">removeClass</span><span class="params">(obj, cls)</span> </span>&#123;</span></span><br><span class="line">        if (hasClass(obj, cls)) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>);</span></span><br><span class="line"><span class="actionscript">            obj.className = obj.className.replace(reg, <span class="string">' '</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> imgAll = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'post-body'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(imgAll == <span class="literal">undefined</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> imgs = imgAll.getElementsByTagName(<span class="string">'img'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;imgs.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//如果设置非全屏标志则跳过</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(hasClass(imgs[i],<span class="string">'class_no_full_screen'</span>))&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">continue</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">            imgs[i].setAttribute(<span class="string">'style'</span>, <span class="string">"cursor: zoom-in"</span>);</span></span><br><span class="line"><span class="actionscript">            imgs[i].onclick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> section=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"section"</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> imgView = <span class="built_in">document</span>.getElementById(<span class="string">'imgViewDom'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(imgView == <span class="literal">undefined</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    imgView=<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="actionscript">                    imgView.id = <span class="string">"imgViewDom"</span>;</span></span><br><span class="line"></span><br><span class="line">                    section.appendChild(imgView)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    imgView.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                        addClass(imgView, <span class="string">"disnone"</span>);</span></span><br><span class="line"><span class="actionscript">                        imgView.innerHTML=<span class="string">""</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">                imgView.innerHTML=<span class="string">"&lt;img id = 'jackslowfuck' src="</span> + <span class="keyword">this</span>.src + <span class="string">" style='cursor: zoom-out; max-width: 100%;'"</span> + <span class="string">"&gt;"</span>;</span></span><br><span class="line"><span class="actionscript">                removeClass(imgView, <span class="string">"disnone"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> jackslowfuck = <span class="built_in">document</span>.getElementById(<span class="string">'jackslowfuck'</span>);</span></span><br><span class="line"><span class="actionscript">                jackslowfuck.onclick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    addClass(imgView, <span class="string">"disnone"</span>);</span></span><br><span class="line"><span class="actionscript">                    imgView.innerHTML=<span class="string">""</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="actionscript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">scirpt</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><h3 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#imgViewDom</span> &#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">        position: fixed;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line">        z-index: 99999999;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 0,0<span class="selector-class">.7</span>);</span></span><br><span class="line">        overflow: auto;</span><br><span class="line">        display: -webkit-box;</span><br><span class="line">        -webkit-box-align: center;</span><br><span class="line">        -webkit-box-pack: center;</span><br><span class="line">        display: -moz-box;</span><br><span class="line">        -moz-box-align: center;</span><br><span class="line">        -moz-box-pack: center;</span><br><span class="line">        display: -o-box;</span><br><span class="line">        -o-box-align: center;</span><br><span class="line">        -o-box-pack: center;</span><br><span class="line">        display: -ms-box;</span><br><span class="line">        -ms-box-align: center;</span><br><span class="line">        -ms-box-pack: center;</span><br><span class="line">        display: box;</span><br><span class="line">        box-align: center;</span><br><span class="line">        box-pack: center;</span><br><span class="line">        cursor: zoom-out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.disnone</span>&#123;</span></span><br><span class="line">        display: none !important;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>我是javascript菜鸟,如果有打包好的请联系告知本人</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在使用主题snippet时候,图片不能全屏预览,于是自己动手写了一个,还是可以使用的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;示意图&quot;&gt;&lt;a href=&quot;#示意图&quot; class=&quot;headerlink&quot; title=&quot;示意图&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="杂谈" scheme="https://liusblog.top/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="html" scheme="https://liusblog.top/tags/html/"/>
    
      <category term="javascipt" scheme="https://liusblog.top/tags/javascipt/"/>
    
  </entry>
  
  <entry>
    <title>github傻瓜的食用方法</title>
    <link href="https://liusblog.top/2019/04/15/github%E5%82%BB%E7%93%9C%E7%9A%84%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://liusblog.top/2019/04/15/github傻瓜的食用方法/</id>
    <published>2019-04-15T15:06:39.000Z</published>
    <updated>2020-03-29T12:34:30.730Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>github 作为全球最大的同性交友网站,是作为程序员的我们必备网站之一,本文就简单的使用做个介绍</p></blockquote><p><img src="/photos/github傻瓜的食用方法/git和github.webp" alt="git"></p><h2 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h2><ol><li>首先在本地创建 ssh key；</li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></span><br></pre></td></tr></table></figure><p>后面的 <a href="mailto:your_email@youremail.com" target="_blank" rel="noopener">your_email@youremail.com</a> 改为你在 github 上注册的邮箱,之后会要求确认路径和输入密码,我们这使用默认的一路回车就行.成功的话会在~/下生成.ssh 文件夹,进去,打开 id_rsa.pub,复制里面的 key.</p><ol start="2"><li><p>回到 github 上,进入 Account Settings（账户配置）,左边选择 SSH Keys,Add SSH Key,title 随便填,粘贴在你电脑上生成的 key.</p></li><li><p>为了验证是否成功,在 git bash 下输入：</p></li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure><p>如果是第一次的会提示是否 continue,输入 yes 就会看到：You’ve successfully authenticated, but GitHub does not provide shell access .这就表示已成功连上 github.</p><ol start="4"><li>接下来我们要做的就是把本地仓库传到 github 上去,在此之前还需要设置 username 和 email,因为 github 每次 commit 都会记录他们.</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"your name"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"your_email@youremail.com"</span></span><br></pre></td></tr></table></figure><h2 id="将一个已有的工程上传到-github-的最简便方法"><a href="#将一个已有的工程上传到-github-的最简便方法" class="headerlink" title="将一个已有的工程上传到 github 的最简便方法"></a>将一个已有的工程上传到 github 的最简便方法</h2><ul><li>到 github 上去新建一个当前工程命名的仓库</li><li>执行 git clone 新建的仓库地址</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>@github.com:spygg/xxxx.git</span><br></pre></td></tr></table></figure><ul><li>将工程下的所有文件拷贝到上一步 xxx 目录中</li><li>执行命令三部曲</li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git comment -m <span class="string">"说明xxxxxxxxxx"</span></span><br><span class="line">git <span class="keyword">push</span></span><br></pre></td></tr></table></figure><h2 id="强制覆盖本地版本"><a href="#强制覆盖本地版本" class="headerlink" title="强制覆盖本地版本"></a>强制覆盖本地版本</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git  <span class="keyword">fetch</span> <span class="comment">--all</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard origin/master</span></span><br></pre></td></tr></table></figure><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><ul><li>更新仓库还是命令三部曲</li><li>如果系统是 windows 请自行安装 git(我是 ubuntu 自带的,自豪一下(_^__^_)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;github 作为全球最大的同性交友网站,是作为程序员的我们必备网站之一,本文就简单的使用做个介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/photos/github傻瓜的食用方法/git和github.webp&quot; alt=
      
    
    </summary>
    
      <category term="杂谈" scheme="https://liusblog.top/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="git" scheme="https://liusblog.top/tags/git/"/>
    
      <category term="github" scheme="https://liusblog.top/tags/github/"/>
    
  </entry>
  
</feed>
